
H:\Arduino\projects\DigitalCounter\build/DigitalCounter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	46 c0       	rjmp	.+140    	; 0x8e <__dtors_end>
       2:	4a c4       	rjmp	.+2196   	; 0x898 <__vector_1>
       4:	22 c4       	rjmp	.+2116   	; 0x84a <__vector_2>
       6:	68 c0       	rjmp	.+208    	; 0xd8 <__bad_interrupt>
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	66 c0       	rjmp	.+204    	; 0xd8 <__bad_interrupt>
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	64 c0       	rjmp	.+200    	; 0xd8 <__bad_interrupt>
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	d1 c3       	rjmp	.+1954   	; 0x7b6 <__vector_9>
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	8c c4       	rjmp	.+2328   	; 0x930 <__vector_11>
      18:	66 c4       	rjmp	.+2252   	; 0x8e6 <__vector_12>
      1a:	5e c0       	rjmp	.+188    	; 0xd8 <__bad_interrupt>
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	5c c0       	rjmp	.+184    	; 0xd8 <__bad_interrupt>
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	5a c0       	rjmp	.+180    	; 0xd8 <__bad_interrupt>
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
      26:	00 00       	nop
      28:	00 00       	nop
      2a:	36 00       	.word	0x0036	; ????
      2c:	33 00       	.word	0x0033	; ????
      2e:	30 00       	.word	0x0030	; ????

00000030 <port_to_mode_PGM>:
      30:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

0000003a <port_to_output_PGM>:
      3a:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

00000044 <digital_pin_to_port_PGM>:
      44:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      54:	03 03 03 03 02 02 03                                .......

0000005b <digital_pin_to_bit_mask_PGM>:
      5b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      6b:	04 08 10 20 40 80 40                                ... @.@

00000072 <digital_pin_to_timer_PGM>:
	...
      7a:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000008a <__ctors_start>:
__ctors_start():
      8a:	ca 04       	cpc	r12, r10

0000008c <__ctors_end>:
__dtors_start():
      8c:	4d 07       	cpc	r20, r29

0000008e <__dtors_end>:
__dtors_end():
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf e5       	ldi	r28, 0x5F	; 95
      94:	d4 e0       	ldi	r29, 0x04	; 4
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      9a:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      9c:	a8 e9       	ldi	r26, 0x98	; 152
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      9e:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      a4:	a3 35       	cpi	r26, 0x53	; 83
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      a6:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>

000000aa <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      aa:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      ac:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      ae:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      b0:	e0 e7       	ldi	r30, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      b2:	f4 e1       	ldi	r31, 0x14	; 20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      b6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      b8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ba:	a8 39       	cpi	r26, 0x98	; 152
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      bc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      c0:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      c2:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      c4:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      c6:	03 c0       	rjmp	.+6      	; 0xce <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      c8:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ca:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      cc:	d4 d7       	rcall	.+4008   	; 0x1076 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      ce:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      d0:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      d2:	d1 f7       	brne	.-12     	; 0xc8 <__do_global_ctors+0x8>
      d4:	9d d4       	rcall	.+2362   	; 0xa10 <main>
      d6:	c0 c9       	rjmp	.-3200   	; 0xfffff458 <__eeprom_end+0xff7ef458>

000000d8 <__bad_interrupt>:
__bad_interrupt():
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <turnOffPWM>:
turnOffPWM():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
      da:	85 30       	cpi	r24, 0x05	; 5
      dc:	41 f0       	breq	.+16     	; 0xee <turnOffPWM+0x14>
      de:	87 30       	cpi	r24, 0x07	; 7
      e0:	49 f0       	breq	.+18     	; 0xf4 <turnOffPWM+0x1a>
      e2:	84 30       	cpi	r24, 0x04	; 4
      e4:	51 f4       	brne	.+20     	; 0xfa <turnOffPWM+0x20>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
      e6:	8f b5       	in	r24, 0x2f	; 47
      e8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
      ea:	8f bd       	out	0x2f, r24	; 47
      ec:	08 95       	ret
      ee:	8f b5       	in	r24, 0x2f	; 47
      f0:	8f 7d       	andi	r24, 0xDF	; 223
      f2:	fb cf       	rjmp	.-10     	; 0xea <turnOffPWM+0x10>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
      f4:	85 b5       	in	r24, 0x25	; 37
      f6:	8f 7d       	andi	r24, 0xDF	; 223
      f8:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
      fa:	08 95       	ret

000000fc <digitalWrite>:
digitalWrite():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:188

void digitalWrite(uint8_t pin, uint8_t val)
{
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     102:	28 2f       	mov	r18, r24
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	f9 01       	movw	r30, r18
     108:	ee 58       	subi	r30, 0x8E	; 142
     10a:	ff 4f       	sbci	r31, 0xFF	; 255
     10c:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     10e:	f9 01       	movw	r30, r18
     110:	e5 5a       	subi	r30, 0xA5	; 165
     112:	ff 4f       	sbci	r31, 0xFF	; 255
     114:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     116:	f9 01       	movw	r30, r18
     118:	ec 5b       	subi	r30, 0xBC	; 188
     11a:	ff 4f       	sbci	r31, 0xFF	; 255
     11c:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     11e:	cc 23       	and	r28, r28
     120:	a1 f0       	breq	.+40     	; 0x14a <digitalWrite+0x4e>
     122:	16 2f       	mov	r17, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     124:	81 11       	cpse	r24, r1
     126:	d9 df       	rcall	.-78     	; 0xda <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     128:	ec 2f       	mov	r30, r28
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	ee 0f       	add	r30, r30
     12e:	ff 1f       	adc	r31, r31
     130:	e6 5c       	subi	r30, 0xC6	; 198
     132:	ff 4f       	sbci	r31, 0xFF	; 255
     134:	a5 91       	lpm	r26, Z+
     136:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     138:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     13a:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     13c:	ec 91       	ld	r30, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     13e:	11 11       	cpse	r17, r1
     140:	08 c0       	rjmp	.+16     	; 0x152 <digitalWrite+0x56>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     142:	d0 95       	com	r29
     144:	de 23       	and	r29, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     146:	dc 93       	st	X, r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     148:	8f bf       	out	0x3f, r24	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     152:	de 2b       	or	r29, r30
     154:	f8 cf       	rjmp	.-16     	; 0x146 <digitalWrite+0x4a>

00000156 <pinMode>:
pinMode():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	e5 5a       	subi	r30, 0xA5	; 165
     160:	ff 4f       	sbci	r31, 0xFF	; 255
     162:	24 91       	lpm	r18, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     164:	8c 5b       	subi	r24, 0xBC	; 188
     166:	9f 4f       	sbci	r25, 0xFF	; 255
     168:	fc 01       	movw	r30, r24
     16a:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     16c:	88 23       	and	r24, r24
     16e:	d1 f0       	breq	.+52     	; 0x1a4 <pinMode+0x4e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	88 0f       	add	r24, r24
     174:	99 1f       	adc	r25, r25
     176:	fc 01       	movw	r30, r24
     178:	e0 5d       	subi	r30, 0xD0	; 208
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	a5 91       	lpm	r26, Z+
     17e:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     180:	fc 01       	movw	r30, r24
     182:	e6 5c       	subi	r30, 0xC6	; 198
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	c5 91       	lpm	r28, Z+
     188:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     18a:	61 11       	cpse	r22, r1
     18c:	0e c0       	rjmp	.+28     	; 0x1aa <pinMode+0x54>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     18e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     190:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     192:	8c 91       	ld	r24, X
     194:	e2 2f       	mov	r30, r18
     196:	e0 95       	com	r30
     198:	8e 23       	and	r24, r30
     19a:	8c 93       	st	X, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     19c:	28 81       	ld	r18, Y
     19e:	e2 23       	and	r30, r18
     1a0:	e8 83       	st	Y, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     1a2:	9f bf       	out	0x3f, r25	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     1aa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     1ac:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     1ae:	ec 91       	ld	r30, X
     1b0:	e2 2b       	or	r30, r18
     1b2:	ec 93       	st	X, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     1b4:	8f bf       	out	0x3f, r24	; 63
     1b6:	f6 cf       	rjmp	.-20     	; 0x1a4 <pinMode+0x4e>

000001b8 <micros>:
micros():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     1b8:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     1ba:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     1bc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <timer0_overflow_count>
     1c0:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <timer0_overflow_count+0x1>
     1c4:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <timer0_overflow_count+0x2>
     1c8:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     1cc:	22 b7       	in	r18, 0x32	; 50
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     1ce:	08 b6       	in	r0, 0x38	; 56
     1d0:	00 fe       	sbrs	r0, 0
     1d2:	05 c0       	rjmp	.+10     	; 0x1de <micros+0x26>
     1d4:	2f 3f       	cpi	r18, 0xFF	; 255
     1d6:	19 f0       	breq	.+6      	; 0x1de <micros+0x26>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	a1 1d       	adc	r26, r1
     1dc:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     1de:	3f bf       	out	0x3f, r19	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     1e0:	ba 2f       	mov	r27, r26
     1e2:	a9 2f       	mov	r26, r25
     1e4:	98 2f       	mov	r25, r24
     1e6:	88 27       	eor	r24, r24
     1e8:	bc 01       	movw	r22, r24
     1ea:	cd 01       	movw	r24, r26
     1ec:	62 0f       	add	r22, r18
     1ee:	71 1d       	adc	r23, r1
     1f0:	81 1d       	adc	r24, r1
     1f2:	91 1d       	adc	r25, r1
     1f4:	43 e0       	ldi	r20, 0x03	; 3
     1f6:	66 0f       	add	r22, r22
     1f8:	77 1f       	adc	r23, r23
     1fa:	88 1f       	adc	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	4a 95       	dec	r20
     200:	d1 f7       	brne	.-12     	; 0x1f6 <micros+0x3e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     202:	08 95       	ret

00000204 <delay>:
delay():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     204:	8f 92       	push	r8
     206:	9f 92       	push	r9
     208:	af 92       	push	r10
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	4b 01       	movw	r8, r22
     216:	5c 01       	movw	r10, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     218:	cf df       	rcall	.-98     	; 0x1b8 <micros>
     21a:	6b 01       	movw	r12, r22
     21c:	7c 01       	movw	r14, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     21e:	cc df       	rcall	.-104    	; 0x1b8 <micros>
     220:	6c 19       	sub	r22, r12
     222:	7d 09       	sbc	r23, r13
     224:	8e 09       	sbc	r24, r14
     226:	9f 09       	sbc	r25, r15
     228:	68 3e       	cpi	r22, 0xE8	; 232
     22a:	73 40       	sbci	r23, 0x03	; 3
     22c:	81 05       	cpc	r24, r1
     22e:	91 05       	cpc	r25, r1
     230:	b0 f3       	brcs	.-20     	; 0x21e <delay+0x1a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	82 1a       	sub	r8, r18
     236:	91 08       	sbc	r9, r1
     238:	a1 08       	sbc	r10, r1
     23a:	b1 08       	sbc	r11, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     23c:	88 ee       	ldi	r24, 0xE8	; 232
     23e:	c8 0e       	add	r12, r24
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	d8 1e       	adc	r13, r24
     244:	e1 1c       	adc	r14, r1
     246:	f1 1c       	adc	r15, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     248:	81 14       	cp	r8, r1
     24a:	91 04       	cpc	r9, r1
     24c:	a1 04       	cpc	r10, r1
     24e:	b1 04       	cpc	r11, r1
     250:	31 f7       	brne	.-52     	; 0x21e <delay+0x1a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	bf 90       	pop	r11
     25c:	af 90       	pop	r10
     25e:	9f 90       	pop	r9
     260:	8f 90       	pop	r8
     262:	08 95       	ret

00000264 <String::StringIfHelper() const>:
StringIfHelper():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
     264:	08 95       	ret

00000266 <nothing>:
nothing():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     266:	08 95       	ret

00000268 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	6c 01       	movw	r12, r24
     27e:	7b 01       	movw	r14, r22
     280:	8b 01       	movw	r16, r22
     282:	04 0f       	add	r16, r20
     284:	15 1f       	adc	r17, r21
     286:	eb 01       	movw	r28, r22
     288:	5e 01       	movw	r10, r28
     28a:	ae 18       	sub	r10, r14
     28c:	bf 08       	sbc	r11, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     28e:	c0 17       	cp	r28, r16
     290:	d1 07       	cpc	r29, r17
     292:	59 f0       	breq	.+22     	; 0x2aa <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     294:	69 91       	ld	r22, Y+
     296:	d6 01       	movw	r26, r12
     298:	ed 91       	ld	r30, X+
     29a:	fc 91       	ld	r31, X
     29c:	01 90       	ld	r0, Z+
     29e:	f0 81       	ld	r31, Z
     2a0:	e0 2d       	mov	r30, r0
     2a2:	c6 01       	movw	r24, r12
     2a4:	09 95       	icall
     2a6:	89 2b       	or	r24, r25
     2a8:	79 f7       	brne	.-34     	; 0x288 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     2aa:	c5 01       	movw	r24, r10
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	ff 90       	pop	r15
     2b6:	ef 90       	pop	r14
     2b8:	df 90       	pop	r13
     2ba:	cf 90       	pop	r12
     2bc:	bf 90       	pop	r11
     2be:	af 90       	pop	r10
     2c0:	08 95       	ret

000002c2 <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     2c2:	fc 01       	movw	r30, r24
     2c4:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     2c6:	44 8d       	ldd	r20, Z+28	; 0x1c
     2c8:	25 2f       	mov	r18, r21
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	84 2f       	mov	r24, r20
     2ce:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	54 17       	cp	r21, r20
     2d6:	10 f0       	brcs	.+4      	; 0x2dc <HardwareSerial::availableForWrite()+0x1a>
     2d8:	cf 96       	adiw	r24, 0x3f	; 63
     2da:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     2dc:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     2de:	08 95       	ret

000002e0 <HardwareSerial::read()>:
read():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     2e0:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2e2:	91 8d       	ldd	r25, Z+25	; 0x19
     2e4:	82 8d       	ldd	r24, Z+26	; 0x1a
     2e6:	98 17       	cp	r25, r24
     2e8:	61 f0       	breq	.+24     	; 0x302 <HardwareSerial::read()+0x22>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     2ea:	a2 8d       	ldd	r26, Z+26	; 0x1a
     2ec:	ae 0f       	add	r26, r30
     2ee:	bf 2f       	mov	r27, r31
     2f0:	b1 1d       	adc	r27, r1
     2f2:	5d 96       	adiw	r26, 0x1d	; 29
     2f4:	8c 91       	ld	r24, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     2f6:	92 8d       	ldd	r25, Z+26	; 0x1a
     2f8:	9f 5f       	subi	r25, 0xFF	; 255
     2fa:	9f 73       	andi	r25, 0x3F	; 63
     2fc:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     306:	08 95       	ret

00000308 <Stream::timedRead() [clone .constprop.5]>:
millis():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     308:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     30a:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     30c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <timer0_millis>
     310:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <timer0_millis+0x1>
     314:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <timer0_millis+0x2>
     318:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     31c:	2f bf       	out	0x3f, r18	; 63
timedRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:34

// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
     31e:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <Serial+0x8>
     322:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <Serial+0x9>
     326:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <Serial+0xa>
     32a:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <Serial+0xb>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:36
  do {
    c = read();
     32e:	86 ea       	ldi	r24, 0xA6	; 166
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	d6 df       	rcall	.-84     	; 0x2e0 <HardwareSerial::read()>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:37
    if (c >= 0) return c;
     334:	97 ff       	sbrs	r25, 7
     336:	26 c0       	rjmp	.+76     	; 0x384 <Stream::timedRead() [clone .constprop.5]+0x7c>
millis():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     338:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     33a:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     33c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <timer0_millis>
     340:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <timer0_millis+0x1>
     344:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <timer0_millis+0x2>
     348:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     34c:	2f bf       	out	0x3f, r18	; 63
timedRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:38
  } while(millis() - _startMillis < _timeout);
     34e:	40 91 ae 00 	lds	r20, 0x00AE	; 0x8000ae <Serial+0x8>
     352:	50 91 af 00 	lds	r21, 0x00AF	; 0x8000af <Serial+0x9>
     356:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Serial+0xa>
     35a:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Serial+0xb>
     35e:	84 1b       	sub	r24, r20
     360:	95 0b       	sbc	r25, r21
     362:	a6 0b       	sbc	r26, r22
     364:	b7 0b       	sbc	r27, r23
     366:	40 91 aa 00 	lds	r20, 0x00AA	; 0x8000aa <Serial+0x4>
     36a:	50 91 ab 00 	lds	r21, 0x00AB	; 0x8000ab <Serial+0x5>
     36e:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <Serial+0x6>
     372:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <Serial+0x7>
     376:	84 17       	cp	r24, r20
     378:	95 07       	cpc	r25, r21
     37a:	a6 07       	cpc	r26, r22
     37c:	b7 07       	cpc	r27, r23
     37e:	b8 f2       	brcs	.-82     	; 0x32e <Stream::timedRead() [clone .constprop.5]+0x26>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:39
  return -1;     // -1 indicates timeout
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:40
}
     384:	08 95       	ret

00000386 <HardwareSerial::peek()>:
peek():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     386:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     388:	91 8d       	ldd	r25, Z+25	; 0x19
     38a:	82 8d       	ldd	r24, Z+26	; 0x1a
     38c:	98 17       	cp	r25, r24
     38e:	31 f0       	breq	.+12     	; 0x39c <HardwareSerial::peek()+0x16>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     390:	82 8d       	ldd	r24, Z+26	; 0x1a
     392:	e8 0f       	add	r30, r24
     394:	f1 1d       	adc	r31, r1
     396:	85 8d       	ldd	r24, Z+29	; 0x1d
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     3a0:	08 95       	ret

000003a2 <HardwareSerial::available()>:
available():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     3a2:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     3a4:	91 8d       	ldd	r25, Z+25	; 0x19
     3a6:	22 8d       	ldd	r18, Z+26	; 0x1a
     3a8:	89 2f       	mov	r24, r25
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	80 5c       	subi	r24, 0xC0	; 192
     3ae:	9f 4f       	sbci	r25, 0xFF	; 255
     3b0:	82 1b       	sub	r24, r18
     3b2:	91 09       	sbc	r25, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     3b4:	8f 73       	andi	r24, 0x3F	; 63
     3b6:	99 27       	eor	r25, r25
     3b8:	08 95       	ret

000003ba <Serial0_available()>:
Serial0_available():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     3ba:	86 ea       	ldi	r24, 0xA6	; 166
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	f1 df       	rcall	.-30     	; 0x3a2 <HardwareSerial::available()>
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	89 2b       	or	r24, r25
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <Serial0_available()+0xe>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     3c8:	82 2f       	mov	r24, r18
     3ca:	08 95       	ret

000003cc <serialEventRun()>:
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	89 2b       	or	r24, r25
     3d2:	19 f0       	breq	.+6      	; 0x3da <serialEventRun()+0xe>
     3d4:	f2 df       	rcall	.-28     	; 0x3ba <Serial0_available()>
     3d6:	81 11       	cpse	r24, r1
     3d8:	13 ce       	rjmp	.-986    	; 0x0 <__vectors>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     3da:	08 95       	ret

000003dc <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     3dc:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     3de:	a4 8d       	ldd	r26, Z+28	; 0x1c
     3e0:	a8 0f       	add	r26, r24
     3e2:	b9 2f       	mov	r27, r25
     3e4:	b1 1d       	adc	r27, r1
     3e6:	a3 5a       	subi	r26, 0xA3	; 163
     3e8:	bf 4f       	sbci	r27, 0xFF	; 255
     3ea:	2c 91       	ld	r18, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     3ec:	84 8d       	ldd	r24, Z+28	; 0x1c
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	8f 73       	andi	r24, 0x3F	; 63
     3f4:	99 27       	eor	r25, r25
     3f6:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     3f8:	a6 89       	ldd	r26, Z+22	; 0x16
     3fa:	b7 89       	ldd	r27, Z+23	; 0x17
     3fc:	2c 93       	st	X, r18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     3fe:	a0 89       	ldd	r26, Z+16	; 0x10
     400:	b1 89       	ldd	r27, Z+17	; 0x11
     402:	8c 91       	ld	r24, X
     404:	82 74       	andi	r24, 0x42	; 66
     406:	8c 93       	st	X, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     408:	93 8d       	ldd	r25, Z+27	; 0x1b
     40a:	84 8d       	ldd	r24, Z+28	; 0x1c
     40c:	98 13       	cpse	r25, r24
     40e:	06 c0       	rjmp	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     410:	02 88       	ldd	r0, Z+18	; 0x12
     412:	f3 89       	ldd	r31, Z+19	; 0x13
     414:	e0 2d       	mov	r30, r0
     416:	80 81       	ld	r24, Z
     418:	8f 7d       	andi	r24, 0xDF	; 223
     41a:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     41c:	08 95       	ret

0000041e <HardwareSerial::write(unsigned char)>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     430:	9b 8d       	ldd	r25, Y+27	; 0x1b
     432:	8c 8d       	ldd	r24, Y+28	; 0x1c
     434:	98 13       	cpse	r25, r24
     436:	19 c0       	rjmp	.+50     	; 0x46a <__stack+0xb>
     438:	e8 89       	ldd	r30, Y+16	; 0x10
     43a:	f9 89       	ldd	r31, Y+17	; 0x11
     43c:	80 81       	ld	r24, Z
     43e:	85 ff       	sbrs	r24, 5
     440:	14 c0       	rjmp	.+40     	; 0x46a <__stack+0xb>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     442:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     444:	f8 94       	cli
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     446:	ee 89       	ldd	r30, Y+22	; 0x16
     448:	ff 89       	ldd	r31, Y+23	; 0x17
     44a:	60 83       	st	Z, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     44c:	e8 89       	ldd	r30, Y+16	; 0x10
     44e:	f9 89       	ldd	r31, Y+17	; 0x11
     450:	80 81       	ld	r24, Z
     452:	82 74       	andi	r24, 0x42	; 66
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     454:	80 83       	st	Z, r24
__iRestore():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     456:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	08 95       	ret
     46a:	f6 2e       	mov	r15, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     46c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     46e:	10 e0       	ldi	r17, 0x00	; 0
     470:	0f 5f       	subi	r16, 0xFF	; 255
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	0f 73       	andi	r16, 0x3F	; 63
     476:	11 27       	eor	r17, r17
     478:	e0 2e       	mov	r14, r16
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     47a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     47c:	8e 11       	cpse	r24, r14
     47e:	0b c0       	rjmp	.+22     	; 0x496 <__stack+0x37>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	07 fc       	sbrc	r0, 7
     484:	fa cf       	rjmp	.-12     	; 0x47a <__stack+0x1b>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     486:	e8 89       	ldd	r30, Y+16	; 0x10
     488:	f9 89       	ldd	r31, Y+17	; 0x11
     48a:	80 81       	ld	r24, Z
     48c:	85 ff       	sbrs	r24, 5
     48e:	f5 cf       	rjmp	.-22     	; 0x47a <__stack+0x1b>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     490:	ce 01       	movw	r24, r28
     492:	a4 df       	rcall	.-184    	; 0x3dc <HardwareSerial::_tx_udr_empty_irq()>
     494:	f2 cf       	rjmp	.-28     	; 0x47a <__stack+0x1b>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     496:	eb 8d       	ldd	r30, Y+27	; 0x1b
     498:	ec 0f       	add	r30, r28
     49a:	fd 2f       	mov	r31, r29
     49c:	f1 1d       	adc	r31, r1
     49e:	e3 5a       	subi	r30, 0xA3	; 163
     4a0:	ff 4f       	sbci	r31, 0xFF	; 255
     4a2:	f0 82       	st	Z, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4a4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4a6:	f8 94       	cli
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     4a8:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     4aa:	ea 89       	ldd	r30, Y+18	; 0x12
     4ac:	fb 89       	ldd	r31, Y+19	; 0x13
     4ae:	80 81       	ld	r24, Z
     4b0:	80 62       	ori	r24, 0x20	; 32
     4b2:	d0 cf       	rjmp	.-96     	; 0x454 <HardwareSerial::write(unsigned char)+0x36>

000004b4 <HardwareSerial::flush()>:
flush():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4ba:	88 8d       	ldd	r24, Y+24	; 0x18
     4bc:	88 23       	and	r24, r24
     4be:	b1 f0       	breq	.+44     	; 0x4ec <HardwareSerial::flush()+0x38>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     4c0:	aa 89       	ldd	r26, Y+18	; 0x12
     4c2:	bb 89       	ldd	r27, Y+19	; 0x13
     4c4:	e8 89       	ldd	r30, Y+16	; 0x10
     4c6:	f9 89       	ldd	r31, Y+17	; 0x11
     4c8:	8c 91       	ld	r24, X
     4ca:	85 fd       	sbrc	r24, 5
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <HardwareSerial::flush()+0x20>
     4ce:	80 81       	ld	r24, Z
     4d0:	86 fd       	sbrc	r24, 6
     4d2:	0c c0       	rjmp	.+24     	; 0x4ec <HardwareSerial::flush()+0x38>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	07 fc       	sbrc	r0, 7
     4d8:	f7 cf       	rjmp	.-18     	; 0x4c8 <HardwareSerial::flush()+0x14>
     4da:	8c 91       	ld	r24, X
     4dc:	85 ff       	sbrs	r24, 5
     4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <HardwareSerial::flush()+0x10>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     4e0:	80 81       	ld	r24, Z
     4e2:	85 ff       	sbrs	r24, 5
     4e4:	ed cf       	rjmp	.-38     	; 0x4c0 <HardwareSerial::flush()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     4e6:	ce 01       	movw	r24, r28
     4e8:	79 df       	rcall	.-270    	; 0x3dc <HardwareSerial::_tx_udr_empty_irq()>
     4ea:	ea cf       	rjmp	.-44     	; 0x4c0 <HardwareSerial::flush()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <ReadSensor()>:
ReadSensor():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:143

}

//ISR functions
void ReadSensor()
{
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
digitalRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     4f6:	e6 e7       	ldi	r30, 0x76	; 118
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     4fc:	ef e5       	ldi	r30, 0x5F	; 95
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     502:	e8 e4       	ldi	r30, 0x48	; 72
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     508:	cc 23       	and	r28, r28
     50a:	49 f1       	breq	.+82     	; 0x55e <ReadSensor()+0x6c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     50c:	81 11       	cpse	r24, r1
     50e:	e5 dd       	rcall	.-1078   	; 0xda <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     510:	ec 2f       	mov	r30, r28
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	ea 5d       	subi	r30, 0xDA	; 218
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	a5 91       	lpm	r26, Z+
     51e:	b4 91       	lpm	r27, Z
     520:	ec 91       	ld	r30, X
     522:	ed 23       	and	r30, r29
     524:	e1 f0       	breq	.+56     	; 0x55e <ReadSensor()+0x6c>
ReadSensor():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:146
    if((digitalRead(senseIn)) == HIGH)
    {
      if(bisSensLow)
     526:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__data_end>
     52a:	88 23       	and	r24, r24
     52c:	a9 f0       	breq	.+42     	; 0x558 <ReadSensor()+0x66>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:148
      {
        count++;
     52e:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <count>
     532:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <count+0x1>
     536:	a0 91 9b 00 	lds	r26, 0x009B	; 0x80009b <count+0x2>
     53a:	b0 91 9c 00 	lds	r27, 0x009C	; 0x80009c <count+0x3>
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	a1 1d       	adc	r26, r1
     542:	b1 1d       	adc	r27, r1
     544:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <count>
     548:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <count+0x1>
     54c:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <count+0x2>
     550:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <count+0x3>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:149
        bisSensLow = false;
     554:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:156
    }
    else
    {
        bisSensLow = true;
    }
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:154
        bisSensLow = false;
      }
    }
    else
    {
        bisSensLow = true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__data_end>
     564:	f9 cf       	rjmp	.-14     	; 0x558 <ReadSensor()+0x66>

00000566 <shiftOut.constprop.19>:
shiftOut():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:40
    digitalWrite(clockPin, LOW);
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	d8 2f       	mov	r29, r24
     56c:	c8 e0       	ldi	r28, 0x08	; 8
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST) {
      digitalWrite(dataPin, val & 1);
     56e:	6d 2f       	mov	r22, r29
     570:	61 70       	andi	r22, 0x01	; 1
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	c3 dd       	rcall	.-1146   	; 0xfc <digitalWrite>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:47
      val >>= 1;
     576:	d6 95       	lsr	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:52
      } else {
      digitalWrite(dataPin, (val & 0x80) != 0);
      val <<= 1;
    }
    digitalWrite(clockPin, HIGH);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	bf dd       	rcall	.-1154   	; 0xfc <digitalWrite>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:53
    digitalWrite(clockPin, LOW);
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	bc dd       	rcall	.-1160   	; 0xfc <digitalWrite>
     584:	c1 50       	subi	r28, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
     586:	99 f7       	brne	.-26     	; 0x56e <shiftOut.constprop.19+0x8>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:55
      val <<= 1;
    }
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <Print::write(char const*) [clone .part.2] [clone .constprop.16]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     58e:	fc 01       	movw	r30, r24
     590:	01 90       	ld	r0, Z+
     592:	00 20       	and	r0, r0
     594:	e9 f7       	brne	.-6      	; 0x590 <Print::write(char const*) [clone .part.2] [clone .constprop.16]+0x2>
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	af 01       	movw	r20, r30
     59a:	48 1b       	sub	r20, r24
     59c:	59 0b       	sbc	r21, r25
     59e:	bc 01       	movw	r22, r24
     5a0:	86 ea       	ldi	r24, 0xA6	; 166
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	61 ce       	rjmp	.-830    	; 0x268 <Print::write(unsigned char const*, unsigned int)>

000005a6 <String::move(String&)>:
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:195
  return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	8c 01       	movw	r16, r24
     5b0:	eb 01       	movw	r28, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:196
  if (buffer) {
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	91 81       	ldd	r25, Z+1	; 0x01
     5b8:	00 97       	sbiw	r24, 0x00	; 0
     5ba:	d1 f0       	breq	.+52     	; 0x5f0 <String::move(String&)+0x4a>
     5bc:	68 81       	ld	r22, Y
     5be:	79 81       	ldd	r23, Y+1	; 0x01
_ZNK6StringcvMS_KFvvEEv.isra.0():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
     5c0:	61 15       	cp	r22, r1
     5c2:	71 05       	cpc	r23, r1
     5c4:	a1 f0       	breq	.+40     	; 0x5ee <String::move(String&)+0x48>
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
     5c6:	42 81       	ldd	r20, Z+2	; 0x02
     5c8:	53 81       	ldd	r21, Z+3	; 0x03
     5ca:	2c 81       	ldd	r18, Y+4	; 0x04
     5cc:	3d 81       	ldd	r19, Y+5	; 0x05
     5ce:	42 17       	cp	r20, r18
     5d0:	53 07       	cpc	r21, r19
     5d2:	68 f0       	brcs	.+26     	; 0x5ee <String::move(String&)+0x48>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
     5d4:	3a d7       	rcall	.+3700   	; 0x144a <strcpy>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
     5d6:	8c 81       	ldd	r24, Y+4	; 0x04
     5d8:	9d 81       	ldd	r25, Y+5	; 0x05
     5da:	f8 01       	movw	r30, r16
     5dc:	95 83       	std	Z+5, r25	; 0x05
     5de:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
     5e0:	1d 82       	std	Y+5, r1	; 0x05
     5e2:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:212
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
     5ee:	e5 d5       	rcall	.+3018   	; 0x11ba <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
     5f0:	88 81       	ld	r24, Y
     5f2:	99 81       	ldd	r25, Y+1	; 0x01
     5f4:	f8 01       	movw	r30, r16
     5f6:	91 83       	std	Z+1, r25	; 0x01
     5f8:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	9b 81       	ldd	r25, Y+3	; 0x03
     5fe:	93 83       	std	Z+3, r25	; 0x03
     600:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
     602:	8c 81       	ldd	r24, Y+4	; 0x04
     604:	9d 81       	ldd	r25, Y+5	; 0x05
     606:	95 83       	std	Z+5, r25	; 0x05
     608:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
     60a:	19 82       	std	Y+1, r1	; 0x01
     60c:	18 82       	st	Y, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
     60e:	1b 82       	std	Y+3, r1	; 0x03
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	e6 cf       	rjmp	.-52     	; 0x5e0 <String::move(String&)+0x3a>

00000614 <String::~String()>:
__base_dtor ():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     614:	fc 01       	movw	r30, r24
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	09 f0       	breq	.+2      	; 0x620 <String::~String()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:125
    free(buffer);
     61e:	cd c5       	rjmp	.+2970   	; 0x11ba <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:126
}
     620:	08 95       	ret

00000622 <String::reserve(unsigned int)>:
reserve():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
     62c:	88 81       	ld	r24, Y
     62e:	99 81       	ldd	r25, Y+1	; 0x01
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	59 f0       	breq	.+22     	; 0x64a <String::reserve(unsigned int)+0x28>
     634:	2a 81       	ldd	r18, Y+2	; 0x02
     636:	3b 81       	ldd	r19, Y+3	; 0x03
     638:	26 17       	cp	r18, r22
     63a:	37 07       	cpc	r19, r23
     63c:	30 f0       	brcs	.+12     	; 0x64a <String::reserve(unsigned int)+0x28>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     63e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	08 95       	ret
     64a:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	3d d6       	rcall	.+3194   	; 0x12cc <realloc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     652:	00 97       	sbiw	r24, 0x00	; 0
     654:	59 f0       	breq	.+22     	; 0x66c <String::reserve(unsigned int)+0x4a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     656:	99 83       	std	Y+1, r25	; 0x01
     658:	88 83       	st	Y, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     65a:	1b 83       	std	Y+3, r17	; 0x03
     65c:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     65e:	2c 81       	ldd	r18, Y+4	; 0x04
     660:	3d 81       	ldd	r19, Y+5	; 0x05
     662:	23 2b       	or	r18, r19
     664:	61 f7       	brne	.-40     	; 0x63e <String::reserve(unsigned int)+0x1c>
     666:	fc 01       	movw	r30, r24
     668:	10 82       	st	Z, r1
     66a:	e9 cf       	rjmp	.-46     	; 0x63e <String::reserve(unsigned int)+0x1c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	e8 cf       	rjmp	.-48     	; 0x640 <String::reserve(unsigned int)+0x1e>

00000670 <String::copy(char const*, unsigned int)>:
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:172
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	ec 01       	movw	r28, r24
     67e:	7b 01       	movw	r14, r22
     680:	8a 01       	movw	r16, r20
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:173
  if (!reserve(length)) {
     682:	ba 01       	movw	r22, r20
     684:	ce df       	rcall	.-100    	; 0x622 <String::reserve(unsigned int)>
     686:	28 81       	ld	r18, Y
     688:	39 81       	ldd	r19, Y+1	; 0x01
     68a:	81 11       	cpse	r24, r1
     68c:	13 c0       	rjmp	.+38     	; 0x6b4 <String::copy(char const*, unsigned int)+0x44>
invalidate():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     68e:	21 15       	cp	r18, r1
     690:	31 05       	cpc	r19, r1
     692:	11 f0       	breq	.+4      	; 0x698 <String::copy(char const*, unsigned int)+0x28>
     694:	c9 01       	movw	r24, r18
     696:	91 d5       	rcall	.+2850   	; 0x11ba <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     698:	19 82       	std	Y+1, r1	; 0x01
     69a:	18 82       	st	Y, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     69c:	1d 82       	std	Y+5, r1	; 0x05
     69e:	1c 82       	std	Y+4, r1	; 0x04
     6a0:	1b 82       	std	Y+3, r1	; 0x03
     6a2:	1a 82       	std	Y+2, r1	; 0x02
copy():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:180
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     6a4:	ce 01       	movw	r24, r28
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     6b4:	1d 83       	std	Y+5, r17	; 0x05
     6b6:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     6b8:	b7 01       	movw	r22, r14
     6ba:	c9 01       	movw	r24, r18
     6bc:	c6 d6       	rcall	.+3468   	; 0x144a <strcpy>
     6be:	f2 cf       	rjmp	.-28     	; 0x6a4 <String::copy(char const*, unsigned int)+0x34>

000006c0 <String::String(char const*) [clone .part.2] [clone .constprop.29]>:
_ZN6StringC2EPKc.part.2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	66 e9       	ldi	r22, 0x96	; 150
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	d3 cf       	rjmp	.-90     	; 0x670 <String::copy(char const*, unsigned int)>

000006ca <String::substring(unsigned int, unsigned int) const>:
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:616
  }
  return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
     6ca:	af 92       	push	r10
     6cc:	bf 92       	push	r11
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
     6e0:	6b 01       	movw	r12, r22
     6e2:	5a 01       	movw	r10, r20
     6e4:	79 01       	movw	r14, r18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:617
  if (left > right) {
     6e6:	24 17       	cp	r18, r20
     6e8:	35 07       	cpc	r19, r21
     6ea:	20 f4       	brcc	.+8      	; 0x6f4 <String::substring(unsigned int, unsigned int) const+0x2a>
     6ec:	8b 2d       	mov	r24, r11
     6ee:	59 01       	movw	r10, r18
     6f0:	e4 2e       	mov	r14, r20
     6f2:	f8 2e       	mov	r15, r24
_ZN6String4initEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     6f4:	19 82       	std	Y+1, r1	; 0x01
     6f6:	18 82       	st	Y, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     6f8:	1b 82       	std	Y+3, r1	; 0x03
     6fa:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
     6fc:	1d 82       	std	Y+5, r1	; 0x05
     6fe:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
     700:	ce 01       	movw	r24, r28
     702:	de df       	rcall	.-68     	; 0x6c0 <String::String(char const*) [clone .part.2] [clone .constprop.29]>
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:623
    unsigned int temp = right;
    right = left;
    left = temp;
  }
  String out;
  if (left >= len) return out;
     704:	d6 01       	movw	r26, r12
     706:	14 96       	adiw	r26, 0x04	; 4
     708:	0d 91       	ld	r16, X+
     70a:	1c 91       	ld	r17, X
     70c:	a0 16       	cp	r10, r16
     70e:	b1 06       	cpc	r11, r17
     710:	20 f5       	brcc	.+72     	; 0x75a <String::substring(unsigned int, unsigned int) const+0x90>
     712:	e0 16       	cp	r14, r16
     714:	f1 06       	cpc	r15, r17
     716:	08 f4       	brcc	.+2      	; 0x71a <String::substring(unsigned int, unsigned int) const+0x50>
     718:	87 01       	movw	r16, r14
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:625
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
     71a:	d6 01       	movw	r26, r12
     71c:	ed 91       	ld	r30, X+
     71e:	fc 91       	ld	r31, X
     720:	11 97       	sbiw	r26, 0x01	; 1
     722:	e0 0f       	add	r30, r16
     724:	f1 1f       	adc	r31, r17
     726:	f0 80       	ld	r15, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:626
  buffer[right] = '\0'; 
     728:	10 82       	st	Z, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:627
  out = buffer + left;  // pointer arithmetic
     72a:	6d 91       	ld	r22, X+
     72c:	7c 91       	ld	r23, X
     72e:	6a 0d       	add	r22, r10
     730:	7b 1d       	adc	r23, r11
operator=():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     732:	61 15       	cp	r22, r1
     734:	71 05       	cpc	r23, r1
     736:	e9 f0       	breq	.+58     	; 0x772 <String::substring(unsigned int, unsigned int) const+0xa8>
     738:	fb 01       	movw	r30, r22
     73a:	01 90       	ld	r0, Z+
     73c:	00 20       	and	r0, r0
     73e:	e9 f7       	brne	.-6      	; 0x73a <String::substring(unsigned int, unsigned int) const+0x70>
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	af 01       	movw	r20, r30
     744:	46 1b       	sub	r20, r22
     746:	57 0b       	sbc	r21, r23
     748:	ce 01       	movw	r24, r28
     74a:	92 df       	rcall	.-220    	; 0x670 <String::copy(char const*, unsigned int)>
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:628
  if (left >= len) return out;
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
  buffer[right] = '\0'; 
  out = buffer + left;  // pointer arithmetic
  buffer[right] = temp;  //restore character
     74c:	f6 01       	movw	r30, r12
     74e:	80 81       	ld	r24, Z
     750:	91 81       	ldd	r25, Z+1	; 0x01
     752:	08 0f       	add	r16, r24
     754:	19 1f       	adc	r17, r25
     756:	d8 01       	movw	r26, r16
     758:	fc 92       	st	X, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:630
  return out;
}
     75a:	ce 01       	movw	r24, r28
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	08 95       	ret
invalidate():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     772:	88 81       	ld	r24, Y
     774:	99 81       	ldd	r25, Y+1	; 0x01
     776:	00 97       	sbiw	r24, 0x00	; 0
     778:	09 f0       	breq	.+2      	; 0x77c <String::substring(unsigned int, unsigned int) const+0xb2>
     77a:	1f d5       	rcall	.+2622   	; 0x11ba <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     77c:	19 82       	std	Y+1, r1	; 0x01
     77e:	18 82       	st	Y, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     780:	1d 82       	std	Y+5, r1	; 0x05
     782:	1c 82       	std	Y+4, r1	; 0x04
     784:	1b 82       	std	Y+3, r1	; 0x03
     786:	1a 82       	std	Y+2, r1	; 0x02
     788:	e1 cf       	rjmp	.-62     	; 0x74c <String::substring(unsigned int, unsigned int) const+0x82>

0000078a <ResetCounter()>:
ResetCounter():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:159
    }
}

void ResetCounter()
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:160
    for (unsigned int i = eep_addr; i < sizeof(long); ++i)
     78e:	d0 e0       	ldi	r29, 0x00	; 0
     790:	c0 e0       	ldi	r28, 0x00	; 0
operator=():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	ce 01       	movw	r24, r28
     796:	09 d4       	rcall	.+2066   	; 0xfaa <eeprom_write_byte>
ResetCounter():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:163
    {
        EEPROM.write(i, 0);
        count = 0;
     798:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <count>
     79c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <count+0x1>
     7a0:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <count+0x2>
     7a4:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <count+0x3>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:160
    }
}

void ResetCounter()
{
    for (unsigned int i = eep_addr; i < sizeof(long); ++i)
     7a8:	21 96       	adiw	r28, 0x01	; 1
     7aa:	c4 30       	cpi	r28, 0x04	; 4
     7ac:	d1 05       	cpc	r29, r1
     7ae:	89 f7       	brne	.-30     	; 0x792 <ResetCounter()+0x8>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:165
    {
        EEPROM.write(i, 0);
        count = 0;
    }
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <__vector_9>:
__vector_9():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     7cc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <timer0_millis>
     7d0:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <timer0_millis+0x1>
     7d4:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <timer0_millis+0x2>
     7d8:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     7dc:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     7e0:	26 e0       	ldi	r18, 0x06	; 6
     7e2:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     7e4:	2d 37       	cpi	r18, 0x7D	; 125
     7e6:	68 f1       	brcs	.+90     	; 0x842 <__vector_9+0x8c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     7e8:	29 e8       	ldi	r18, 0x89	; 137
     7ea:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     7ec:	03 96       	adiw	r24, 0x03	; 3
     7ee:	a1 1d       	adc	r26, r1
     7f0:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     7f2:	20 93 9d 00 	sts	0x009D, r18	; 0x80009d <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     7f6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <timer0_millis>
     7fa:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <timer0_millis+0x1>
     7fe:	a0 93 a4 00 	sts	0x00A4, r26	; 0x8000a4 <timer0_millis+0x2>
     802:	b0 93 a5 00 	sts	0x00A5, r27	; 0x8000a5 <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     806:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <timer0_overflow_count>
     80a:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <timer0_overflow_count+0x1>
     80e:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <timer0_overflow_count+0x2>
     812:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <timer0_overflow_count+0x3>
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	a1 1d       	adc	r26, r1
     81a:	b1 1d       	adc	r27, r1
     81c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <timer0_overflow_count>
     820:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <timer0_overflow_count+0x1>
     824:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <timer0_overflow_count+0x2>
     828:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	3f 91       	pop	r19
     836:	2f 91       	pop	r18
     838:	0f 90       	pop	r0
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	0f 90       	pop	r0
     83e:	1f 90       	pop	r1
     840:	18 95       	reti
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     842:	02 96       	adiw	r24, 0x02	; 2
     844:	a1 1d       	adc	r26, r1
     846:	b1 1d       	adc	r27, r1
     848:	d4 cf       	rjmp	.-88     	; 0x7f2 <__vector_9+0x3c>

0000084a <__vector_2>:
__vector_2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	2f 93       	push	r18
     856:	3f 93       	push	r19
     858:	4f 93       	push	r20
     85a:	5f 93       	push	r21
     85c:	6f 93       	push	r22
     85e:	7f 93       	push	r23
     860:	8f 93       	push	r24
     862:	9f 93       	push	r25
     864:	af 93       	push	r26
     866:	bf 93       	push	r27
     868:	ef 93       	push	r30
     86a:	ff 93       	push	r31
     86c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     870:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     874:	09 95       	icall
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_1>:
__vector_1():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
     8ba:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8be:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     8c2:	09 95       	icall
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	0f 90       	pop	r0
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	0f 90       	pop	r0
     8e2:	1f 90       	pop	r1
     8e4:	18 95       	reti

000008e6 <__vector_12>:
__vector_12():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	2f 93       	push	r18
     8f2:	3f 93       	push	r19
     8f4:	4f 93       	push	r20
     8f6:	5f 93       	push	r21
     8f8:	6f 93       	push	r22
     8fa:	7f 93       	push	r23
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	af 93       	push	r26
     902:	bf 93       	push	r27
     904:	ef 93       	push	r30
     906:	ff 93       	push	r31
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     908:	86 ea       	ldi	r24, 0xA6	; 166
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	67 dd       	rcall	.-1330   	; 0x3dc <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <__vector_11>:
__vector_11():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	2f 93       	push	r18
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     944:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <Serial+0x10>
     948:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <Serial+0x11>
     94c:	80 81       	ld	r24, Z
     94e:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <Serial+0x16>
     952:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <Serial+0x17>
     956:	82 fd       	sbrc	r24, 2
     958:	1b c0       	rjmp	.+54     	; 0x990 <__vector_11+0x60>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     95a:	90 81       	ld	r25, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     95c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Serial+0x19>
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     964:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <Serial+0x1a>
     968:	82 17       	cp	r24, r18
     96a:	41 f0       	breq	.+16     	; 0x97c <__vector_11+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     96c:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <Serial+0x19>
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	ea 55       	subi	r30, 0x5A	; 90
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     978:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Serial+0x19>
__vector_11():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti
_rx_complete_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     990:	80 81       	ld	r24, Z
     992:	f4 cf       	rjmp	.-24     	; 0x97c <__vector_11+0x4c>

00000994 <global constructors keyed to 65535_0_DigitalCounter.ino.cpp.o.2103>:
_GLOBAL__I_65535_0_DigitalCounter.ino.cpp.o.2103():
     994:	e6 ea       	ldi	r30, 0xA6	; 166
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	13 82       	std	Z+3, r1	; 0x03
     99a:	12 82       	std	Z+2, r1	; 0x02
     99c:	88 ee       	ldi	r24, 0xE8	; 232
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	a0 e0       	ldi	r26, 0x00	; 0
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	84 83       	std	Z+4, r24	; 0x04
     9a6:	95 83       	std	Z+5, r25	; 0x05
     9a8:	a6 83       	std	Z+6, r26	; 0x06
     9aa:	b7 83       	std	Z+7, r27	; 0x07
     9ac:	8d e7       	ldi	r24, 0x7D	; 125
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
     9b4:	80 e4       	ldi	r24, 0x40	; 64
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	95 87       	std	Z+13, r25	; 0x0d
     9ba:	84 87       	std	Z+12, r24	; 0x0c
     9bc:	29 e2       	ldi	r18, 0x29	; 41
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	37 87       	std	Z+15, r19	; 0x0f
     9c2:	26 87       	std	Z+14, r18	; 0x0e
     9c4:	2b e2       	ldi	r18, 0x2B	; 43
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	31 8b       	std	Z+17, r19	; 0x11
     9ca:	20 8b       	std	Z+16, r18	; 0x10
     9cc:	2a e2       	ldi	r18, 0x2A	; 42
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	33 8b       	std	Z+19, r19	; 0x13
     9d2:	22 8b       	std	Z+18, r18	; 0x12
     9d4:	95 8b       	std	Z+21, r25	; 0x15
     9d6:	84 8b       	std	Z+20, r24	; 0x14
     9d8:	8c e2       	ldi	r24, 0x2C	; 44
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	97 8b       	std	Z+23, r25	; 0x17
     9de:	86 8b       	std	Z+22, r24	; 0x16
     9e0:	11 8e       	std	Z+25, r1	; 0x19
     9e2:	12 8e       	std	Z+26, r1	; 0x1a
     9e4:	13 8e       	std	Z+27, r1	; 0x1b
     9e6:	14 8e       	std	Z+28, r1	; 0x1c
     9e8:	e9 e4       	ldi	r30, 0x49	; 73
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	11 82       	std	Z+1, r1	; 0x01
     9ee:	10 82       	st	Z, r1
     9f0:	13 82       	std	Z+3, r1	; 0x03
     9f2:	12 82       	std	Z+2, r1	; 0x02
     9f4:	15 82       	std	Z+5, r1	; 0x05
     9f6:	14 82       	std	Z+4, r1	; 0x04
     9f8:	cf 01       	movw	r24, r30
     9fa:	62 de       	rcall	.-828    	; 0x6c0 <String::String(char const*) [clone .part.2] [clone .constprop.29]>
     9fc:	e3 e4       	ldi	r30, 0x43	; 67
     9fe:	f1 e0       	ldi	r31, 0x01	; 1
     a00:	11 82       	std	Z+1, r1	; 0x01
     a02:	10 82       	st	Z, r1
     a04:	13 82       	std	Z+3, r1	; 0x03
     a06:	12 82       	std	Z+2, r1	; 0x02
     a08:	15 82       	std	Z+5, r1	; 0x05
     a0a:	14 82       	std	Z+4, r1	; 0x04
     a0c:	cf 01       	movw	r24, r30
     a0e:	58 ce       	rjmp	.-848    	; 0x6c0 <String::String(char const*) [clone .part.2] [clone .constprop.29]>

00000a10 <main>:
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	a8 97       	sbiw	r28, 0x28	; 40
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     a24:	78 94       	sei
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     a26:	83 b7       	in	r24, 0x33	; 51
     a28:	83 60       	ori	r24, 0x03	; 3
     a2a:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     a2c:	89 b7       	in	r24, 0x39	; 57
     a2e:	81 60       	ori	r24, 0x01	; 1
     a30:	89 bf       	out	0x39, r24	; 57
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	9e bd       	out	0x2e, r25	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     a36:	8e b5       	in	r24, 0x2e	; 46
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	8e bd       	out	0x2e, r24	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     a3c:	8f b5       	in	r24, 0x2f	; 47
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	8f bd       	out	0x2f, r24	; 47
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     a42:	85 b5       	in	r24, 0x25	; 37
     a44:	84 60       	ori	r24, 0x04	; 4
     a46:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     a48:	85 b5       	in	r24, 0x25	; 37
     a4a:	80 64       	ori	r24, 0x40	; 64
     a4c:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     a4e:	86 e8       	ldi	r24, 0x86	; 134
     a50:	86 b9       	out	0x06, r24	; 6
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     a52:	1a b8       	out	0x0a, r1	; 10
begin():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     a54:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <Serial+0x10>
     a58:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <Serial+0x11>
     a5c:	90 83       	st	Z, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a5e:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <Serial+0xc>
     a62:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <Serial+0xd>
     a66:	10 82       	st	Z, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     a68:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <Serial+0xe>
     a6c:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <Serial+0xf>
     a70:	97 e6       	ldi	r25, 0x67	; 103
     a72:	90 83       	st	Z, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     a74:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Serial+0x18>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a78:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <Serial+0x14>
     a7c:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <Serial+0x15>
     a80:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     a82:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <Serial+0x12>
     a86:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <Serial+0x13>
     a8a:	80 81       	ld	r24, Z
     a8c:	88 69       	ori	r24, 0x98	; 152
     a8e:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     a90:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <Serial+0x12>
     a94:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <Serial+0x13>
     a98:	80 81       	ld	r24, Z
     a9a:	8f 7d       	andi	r24, 0xDF	; 223
     a9c:	80 83       	st	Z, r24
setup():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:89
    //ISR
    attachInterrupt(digitalPinToInterrupt(senseIn), ReadSensor, CHANGE);
    attachInterrupt(digitalPinToInterrupt(reset), ResetCounter, RISING);

    //74hc164
    pinMode(data, OUTPUT);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	59 db       	rcall	.-2382   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:90
    pinMode(clock, OUTPUT);
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	56 db       	rcall	.-2388   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:92

    pinMode(seg1,OUTPUT);
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	85 e0       	ldi	r24, 0x05	; 5
     aae:	53 db       	rcall	.-2394   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:93
    pinMode(seg2, OUTPUT);
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	86 e0       	ldi	r24, 0x06	; 6
     ab4:	50 db       	rcall	.-2400   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:94
    pinMode(seg3, OUTPUT);
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	87 e0       	ldi	r24, 0x07	; 7
     aba:	4d db       	rcall	.-2406   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:95
    pinMode(seg4, OUTPUT);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	88 e0       	ldi	r24, 0x08	; 8
     ac0:	4a db       	rcall	.-2412   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:96
    pinMode(seg5, OUTPUT);
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	89 e0       	ldi	r24, 0x09	; 9
     ac6:	47 db       	rcall	.-2418   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:97
    pinMode(seg6, OUTPUT);
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	8a e0       	ldi	r24, 0x0A	; 10
     acc:	44 db       	rcall	.-2424   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:99

    pinMode(senseIn, INPUT);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	84 e0       	ldi	r24, 0x04	; 4
     ad2:	41 db       	rcall	.-2430   	; 0x156 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:101

    pinMode(reset,INPUT);
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	8b e0       	ldi	r24, 0x0B	; 11
     ad8:	3e db       	rcall	.-2436   	; 0x156 <pinMode>
zeroAllSegments():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:286

}

void zeroAllSegments()
{
    digitalWrite(seg1, LOW);
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	85 e0       	ldi	r24, 0x05	; 5
     ade:	0e db       	rcall	.-2532   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:287
    digitalWrite(seg2, LOW);
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	86 e0       	ldi	r24, 0x06	; 6
     ae4:	0b db       	rcall	.-2538   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:288
    digitalWrite(seg3, LOW);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	87 e0       	ldi	r24, 0x07	; 7
     aea:	08 db       	rcall	.-2544   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:289
    digitalWrite(seg4, LOW);
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	05 db       	rcall	.-2550   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:290
    digitalWrite(seg5, LOW);
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	89 e0       	ldi	r24, 0x09	; 9
     af6:	02 db       	rcall	.-2556   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:291
    digitalWrite(seg6, LOW);
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	ff da       	rcall	.-2562   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:293
    // clear Shift Register.
    shiftOut(data, clock, LSBFIRST, digits[0]);
     afe:	8f e3       	ldi	r24, 0x3F	; 63
     b00:	32 dd       	rcall	.-1436   	; 0x566 <shiftOut.constprop.19>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:295

    delay(50); // A bit Delay.
     b02:	62 e3       	ldi	r22, 0x32	; 50
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	7c db       	rcall	.-2312   	; 0x204 <delay>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	44 d2       	rcall	.+1160   	; 0xf9a <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.4():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     b12:	89 83       	std	Y+1, r24	; 0x01
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	40 d2       	rcall	.+1152   	; 0xf9a <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.4():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     b1a:	8a 83       	std	Y+2, r24	; 0x02
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	3c d2       	rcall	.+1144   	; 0xf9a <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.4():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     b22:	8b 83       	std	Y+3, r24	; 0x03
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	38 d2       	rcall	.+1136   	; 0xf9a <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.4():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     b2a:	8c 83       	std	Y+4, r24	; 0x04
setup():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:110
    DisplaySplash();

    //REad Saved Count From EEPROM
    long i; 
    EEPROM.get(eep_addr, i);
    if(i > 0)
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
     b30:	ab 81       	ldd	r26, Y+3	; 0x03
     b32:	bc 81       	ldd	r27, Y+4	; 0x04
     b34:	18 16       	cp	r1, r24
     b36:	19 06       	cpc	r1, r25
     b38:	1a 06       	cpc	r1, r26
     b3a:	1b 06       	cpc	r1, r27
     b3c:	44 f4       	brge	.+16     	; 0xb4e <main+0x13e>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:111
        count = i;
     b3e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <count>
     b42:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <count+0x1>
     b46:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <count+0x2>
     b4a:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <count+0x3>
printNumber():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:243

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
     b4e:	9a e0       	ldi	r25, 0x0A	; 10
     b50:	49 2e       	mov	r4, r25
     b52:	51 2c       	mov	r5, r1
     b54:	61 2c       	mov	r6, r1
     b56:	71 2c       	mov	r7, r1
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	7c 01       	movw	r14, r24
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	88 2e       	mov	r8, r24
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	98 2e       	mov	r9, r24
loop():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:117
}

void loop()
{
    // debug
    if (Serial.available())
     b66:	86 ea       	ldi	r24, 0xA6	; 166
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	1b dc       	rcall	.-1994   	; 0x3a2 <HardwareSerial::available()>
     b6c:	89 2b       	or	r24, r25
     b6e:	09 f4       	brne	.+2      	; 0xb72 <main+0x162>
     b70:	90 c0       	rjmp	.+288    	; 0xc92 <main+0x282>
_ZN6String4initEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     b72:	1a 82       	std	Y+2, r1	; 0x02
     b74:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     b76:	1c 82       	std	Y+4, r1	; 0x04
     b78:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
     b7a:	1e 82       	std	Y+6, r1	; 0x06
     b7c:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
     b7e:	c7 01       	movw	r24, r14
     b80:	9f dd       	rcall	.-1218   	; 0x6c0 <String::String(char const*) [clone .part.2] [clone .constprop.29]>
readStringUntil():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:246
}

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
     b82:	c2 db       	rcall	.-2172   	; 0x308 <Stream::timedRead() [clone .constprop.5]>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:247
  while (c >= 0 && c != terminator)
     b84:	97 fd       	sbrc	r25, 7
     b86:	1b c0       	rjmp	.+54     	; 0xbbe <main+0x1ae>
     b88:	8a 30       	cpi	r24, 0x0A	; 10
     b8a:	91 05       	cpc	r25, r1
     b8c:	c1 f0       	breq	.+48     	; 0xbbe <main+0x1ae>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.cpp:249
  {
    ret += (char)c;
     b8e:	8b a3       	std	Y+35, r24	; 0x23
concat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:285

unsigned char String::concat(char c)
{
  char buf[2];
  buf[0] = c;
  buf[1] = 0;
     b90:	1c a2       	std	Y+36, r1	; 0x24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:266
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     b92:	0d 81       	ldd	r16, Y+5	; 0x05
     b94:	1e 81       	ldd	r17, Y+6	; 0x06
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:269
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     b9a:	b8 01       	movw	r22, r16
     b9c:	c7 01       	movw	r24, r14
     b9e:	41 dd       	rcall	.-1406   	; 0x622 <String::reserve(unsigned int)>
     ba0:	88 23       	and	r24, r24
     ba2:	79 f3       	breq	.-34     	; 0xb82 <main+0x172>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:270
  strcpy(buffer + len, cstr);
     ba4:	29 81       	ldd	r18, Y+1	; 0x01
     ba6:	3a 81       	ldd	r19, Y+2	; 0x02
     ba8:	8d 81       	ldd	r24, Y+5	; 0x05
     baa:	9e 81       	ldd	r25, Y+6	; 0x06
     bac:	be 01       	movw	r22, r28
     bae:	6d 5d       	subi	r22, 0xDD	; 221
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	49 d4       	rcall	.+2194   	; 0x144a <strcpy>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:271
  len = newlen;
     bb8:	1e 83       	std	Y+6, r17	; 0x06
     bba:	0d 83       	std	Y+5, r16	; 0x05
     bbc:	e2 cf       	rjmp	.-60     	; 0xb82 <main+0x172>
operator=():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:228
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
  if (this != &rval) move(rval);
     bbe:	b7 01       	movw	r22, r14
     bc0:	83 e4       	ldi	r24, 0x43	; 67
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	f0 dc       	rcall	.-1568   	; 0x5a6 <String::move(String&)>
loop():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:119
    {
        input = Serial.readStringUntil('\n');
     bc6:	c7 01       	movw	r24, r14
     bc8:	25 dd       	rcall	.-1462   	; 0x614 <String::~String()>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:120
        substringData = input.substring(0, 3).toInt();
     bca:	23 e0       	ldi	r18, 0x03	; 3
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	63 e4       	ldi	r22, 0x43	; 67
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	c7 01       	movw	r24, r14
     bd8:	78 dd       	rcall	.-1296   	; 0x6ca <String::substring(unsigned int, unsigned int) const>
     bda:	c7 01       	movw	r24, r14
     bdc:	1b dd       	rcall	.-1482   	; 0x614 <String::~String()>
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:178
  int indexOf( const String &str, unsigned int fromIndex ) const;
  int lastIndexOf( char ch ) const;
  int lastIndexOf( char ch, unsigned int fromIndex ) const;
  int lastIndexOf( const String &str ) const;
  int lastIndexOf( const String &str, unsigned int fromIndex ) const;
  String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     bde:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <input+0x4>
     be2:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <input+0x5>
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	63 e4       	ldi	r22, 0x43	; 67
     bec:	71 e0       	ldi	r23, 0x01	; 1
     bee:	c7 01       	movw	r24, r14
     bf0:	6c dd       	rcall	.-1320   	; 0x6ca <String::substring(unsigned int, unsigned int) const>
toInt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	09 f4       	brne	.+2      	; 0xbfc <main+0x1ec>
     bfa:	a5 c0       	rjmp	.+330    	; 0xd46 <main+0x336>
     bfc:	54 d1       	rcall	.+680    	; 0xea6 <atol>
loop():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:121
        substringchar = input.substring(0).toInt();
     bfe:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <substringchar+0x1>
     c02:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <substringchar>
     c06:	c7 01       	movw	r24, r14
     c08:	05 dd       	rcall	.-1526   	; 0x614 <String::~String()>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:122
        delay(1);
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	f8 da       	rcall	.-2576   	; 0x204 <delay>
write():
     c14:	8b e8       	ldi	r24, 0x8B	; 139
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	ba dc       	rcall	.-1676   	; 0x58e <Print::write(char const*) [clone .part.2] [clone .constprop.16]>
loop():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:126
        Serial.print("data:   ");
        //Serial.print(substringData);
       // Serial.print(" ,   ");
        Serial.println(substringchar);
     c1a:	a0 90 64 00 	lds	r10, 0x0064	; 0x800064 <substringchar>
     c1e:	b0 90 65 00 	lds	r11, 0x0065	; 0x800065 <substringchar+0x1>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     c22:	0b 2c       	mov	r0, r11
     c24:	00 0c       	add	r0, r0
     c26:	cc 08       	sbc	r12, r12
     c28:	dd 08       	sbc	r13, r13
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     c2a:	d7 fe       	sbrs	r13, 7
     c2c:	90 c0       	rjmp	.+288    	; 0xd4e <main+0x33e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     c2e:	6d e2       	ldi	r22, 0x2D	; 45
     c30:	86 ea       	ldi	r24, 0xA6	; 166
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	f4 db       	rcall	.-2072   	; 0x41e <HardwareSerial::write(unsigned char)>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     c36:	22 27       	eor	r18, r18
     c38:	33 27       	eor	r19, r19
     c3a:	a9 01       	movw	r20, r18
     c3c:	2a 19       	sub	r18, r10
     c3e:	3b 09       	sbc	r19, r11
     c40:	4c 09       	sbc	r20, r12
     c42:	5d 09       	sbc	r21, r13
printNumber():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:237
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     c44:	19 a2       	std	Y+33, r1	; 0x21
     c46:	8e 01       	movw	r16, r28
     c48:	0f 5d       	subi	r16, 0xDF	; 223
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:244
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    n /= base;
     c4c:	ca 01       	movw	r24, r20
     c4e:	b9 01       	movw	r22, r18
     c50:	a3 01       	movw	r20, r6
     c52:	92 01       	movw	r18, r4
     c54:	ee d1       	rcall	.+988    	; 0x1032 <__udivmodsi4>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     c56:	60 5d       	subi	r22, 0xD0	; 208
     c58:	f8 01       	movw	r30, r16
     c5a:	62 93       	st	-Z, r22
     c5c:	8f 01       	movw	r16, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     c5e:	21 15       	cp	r18, r1
     c60:	31 05       	cpc	r19, r1
     c62:	41 05       	cpc	r20, r1
     c64:	51 05       	cpc	r21, r1
     c66:	91 f7       	brne	.-28     	; 0xc4c <main+0x23c>
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     c68:	01 15       	cp	r16, r1
     c6a:	11 05       	cpc	r17, r1
     c6c:	11 f0       	breq	.+4      	; 0xc72 <main+0x262>
     c6e:	c8 01       	movw	r24, r16
     c70:	8e dc       	rcall	.-1764   	; 0x58e <Print::write(char const*) [clone .part.2] [clone .constprop.16]>
     c72:	84 e9       	ldi	r24, 0x94	; 148
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	8b dc       	rcall	.-1770   	; 0x58e <Print::write(char const*) [clone .part.2] [clone .constprop.16]>
loop():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:132
        // if (substringData > 0)
        // {

        //}
    
    shiftOut(data, clock, LSBFIRST, digits[substringchar]);
     c78:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <substringchar>
     c7c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <substringchar+0x1>
     c80:	e4 59       	subi	r30, 0x94	; 148
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	80 81       	ld	r24, Z
     c86:	6f dc       	rcall	.-1826   	; 0x566 <shiftOut.constprop.19>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:133
    delay(500);
     c88:	64 ef       	ldi	r22, 0xF4	; 244
     c8a:	71 e0       	ldi	r23, 0x01	; 1
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	b9 da       	rcall	.-2702   	; 0x204 <delay>
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:170
}

/// @brief Display Numbers On 7-Segments.
void displayNumber()
{
strnum = count;
     c92:	60 91 99 00 	lds	r22, 0x0099	; 0x800099 <count>
     c96:	70 91 9a 00 	lds	r23, 0x009A	; 0x80009a <count+0x1>
     c9a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <count+0x2>
     c9e:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <count+0x3>
_ZN6String4initEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     ca2:	1c a2       	std	Y+36, r1	; 0x24
     ca4:	1b a2       	std	Y+35, r1	; 0x23
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     ca6:	1e a2       	std	Y+38, r1	; 0x26
     ca8:	1d a2       	std	Y+37, r1	; 0x25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
     caa:	18 a6       	std	Y+40, r1	; 0x28
     cac:	1f a2       	std	Y+39, r1	; 0x27
ltoa():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:484
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     cae:	2a e0       	ldi	r18, 0x0A	; 10
     cb0:	a7 01       	movw	r20, r14
     cb2:	1f d1       	rcall	.+574    	; 0xef2 <__ltoa_ncheck>
operator=():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     cb4:	f7 01       	movw	r30, r14
     cb6:	01 90       	ld	r0, Z+
     cb8:	00 20       	and	r0, r0
     cba:	e9 f7       	brne	.-6      	; 0xcb6 <main+0x2a6>
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	af 01       	movw	r20, r30
     cc0:	4e 19       	sub	r20, r14
     cc2:	5f 09       	sbc	r21, r15
     cc4:	b7 01       	movw	r22, r14
     cc6:	ce 01       	movw	r24, r28
     cc8:	83 96       	adiw	r24, 0x23	; 35
     cca:	d2 dc       	rcall	.-1628   	; 0x670 <String::copy(char const*, unsigned int)>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:234
  return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
  if (this != &rval) move(rval);
     ccc:	be 01       	movw	r22, r28
     cce:	6d 5d       	subi	r22, 0xDD	; 221
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	89 e4       	ldi	r24, 0x49	; 73
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	67 dc       	rcall	.-1842   	; 0x5a6 <String::move(String&)>
_ZN15StringSumHelperD2Ev():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     cd8:	ce 01       	movw	r24, r28
     cda:	83 96       	adiw	r24, 0x23	; 35
     cdc:	9b dc       	rcall	.-1738   	; 0x614 <String::~String()>
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:171
int numLengh = strnum.length() - 1;
     cde:	c0 90 4d 01 	lds	r12, 0x014D	; 0x80014d <strnum+0x4>
     ce2:	d0 90 4e 01 	lds	r13, 0x014E	; 0x80014e <strnum+0x5>
     ce6:	f1 e0       	ldi	r31, 0x01	; 1
     ce8:	cf 1a       	sub	r12, r31
     cea:	d1 08       	sbc	r13, r1
main():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:172
for(int i = 0; i < numLengh; ++i)
     cec:	10 e0       	ldi	r17, 0x00	; 0
     cee:	00 e0       	ldi	r16, 0x00	; 0
displayNumber():
     cf0:	0c 15       	cp	r16, r12
     cf2:	1d 05       	cpc	r17, r13
     cf4:	0c f0       	brlt	.+2      	; 0xcf8 <main+0x2e8>
     cf6:	c7 c0       	rjmp	.+398    	; 0xe86 <main+0x476>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:174
{
    uint8_t number = strnum.substring(i,i + 1).toInt();
     cf8:	58 01       	movw	r10, r16
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	a8 1a       	sub	r10, r24
     cfe:	b8 0a       	sbc	r11, r24
     d00:	95 01       	movw	r18, r10
     d02:	a8 01       	movw	r20, r16
     d04:	69 e4       	ldi	r22, 0x49	; 73
     d06:	71 e0       	ldi	r23, 0x01	; 1
     d08:	c7 01       	movw	r24, r14
     d0a:	df dc       	rcall	.-1602   	; 0x6ca <String::substring(unsigned int, unsigned int) const>
toInt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:739
  return 0;
     d10:	31 2c       	mov	r3, r1
toInt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	11 f0       	breq	.+4      	; 0xd1a <main+0x30a>
     d16:	c7 d0       	rcall	.+398    	; 0xea6 <atol>
     d18:	36 2e       	mov	r3, r22
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:174
     d1a:	c7 01       	movw	r24, r14
     d1c:	7b dc       	rcall	.-1802   	; 0x614 <String::~String()>
displayDigitOnSegment():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:217

void displayDigitOnSegment(int segNum,uint8_t num)
{
    // First we need Toi Shift out our number.
    // and just need one time per draw.
    shiftOut(data, clock, LSBFIRST, digits[num]);
     d1e:	e3 2d       	mov	r30, r3
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	e4 59       	subi	r30, 0x94	; 148
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	80 81       	ld	r24, Z
     d28:	1e dc       	rcall	.-1988   	; 0x566 <shiftOut.constprop.19>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:219

    switch (segNum)
     d2a:	03 30       	cpi	r16, 0x03	; 3
     d2c:	11 05       	cpc	r17, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <main+0x322>
     d30:	6b c0       	rjmp	.+214    	; 0xe08 <main+0x3f8>
     d32:	14 f5       	brge	.+68     	; 0xd78 <main+0x368>
     d34:	01 30       	cpi	r16, 0x01	; 1
     d36:	11 05       	cpc	r17, r1
     d38:	e9 f1       	breq	.+122    	; 0xdb4 <main+0x3a4>
     d3a:	02 30       	cpi	r16, 0x02	; 2
     d3c:	11 05       	cpc	r17, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <main+0x332>
     d40:	4e c0       	rjmp	.+156    	; 0xdde <main+0x3ce>
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:174
{
strnum = count;
int numLengh = strnum.length() - 1;
for(int i = 0; i < numLengh; ++i)
{
    uint8_t number = strnum.substring(i,i + 1).toInt();
     d42:	85 01       	movw	r16, r10
     d44:	d5 cf       	rjmp	.-86     	; 0xcf0 <main+0x2e0>
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:739
  return 0;
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	cb 01       	movw	r24, r22
     d4c:	58 cf       	rjmp	.-336    	; 0xbfe <main+0x1ee>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     d4e:	a6 01       	movw	r20, r12
     d50:	95 01       	movw	r18, r10
printNumber():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:237
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     d52:	19 a2       	std	Y+33, r1	; 0x21
     d54:	8e 01       	movw	r16, r28
     d56:	0f 5d       	subi	r16, 0xDF	; 223
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:244
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    n /= base;
     d5a:	ca 01       	movw	r24, r20
     d5c:	b9 01       	movw	r22, r18
     d5e:	a3 01       	movw	r20, r6
     d60:	92 01       	movw	r18, r4
     d62:	67 d1       	rcall	.+718    	; 0x1032 <__udivmodsi4>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d64:	60 5d       	subi	r22, 0xD0	; 208
     d66:	f8 01       	movw	r30, r16
     d68:	62 93       	st	-Z, r22
     d6a:	8f 01       	movw	r16, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     d6c:	21 15       	cp	r18, r1
     d6e:	31 05       	cpc	r19, r1
     d70:	41 05       	cpc	r20, r1
     d72:	51 05       	cpc	r21, r1
     d74:	91 f7       	brne	.-28     	; 0xd5a <main+0x34a>
     d76:	78 cf       	rjmp	.-272    	; 0xc68 <main+0x258>
displayDigitOnSegment():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:219
{
    // First we need Toi Shift out our number.
    // and just need one time per draw.
    shiftOut(data, clock, LSBFIRST, digits[num]);

    switch (segNum)
     d78:	05 30       	cpi	r16, 0x05	; 5
     d7a:	11 05       	cpc	r17, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <main+0x370>
     d7e:	6e c0       	rjmp	.+220    	; 0xe5c <main+0x44c>
     d80:	0c f4       	brge	.+2      	; 0xd84 <main+0x374>
     d82:	57 c0       	rjmp	.+174    	; 0xe32 <main+0x422>
     d84:	06 30       	cpi	r16, 0x06	; 6
     d86:	11 05       	cpc	r17, r1
     d88:	e1 f6       	brne	.-72     	; 0xd42 <main+0x332>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:268
            digitalWrite(seg4, LOW);
            digitalWrite(seg1, LOW);
            digitalWrite(seg6, LOW);
            break;
        case 6:
            digitalWrite(seg6, HIGH);
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	b6 d9       	rcall	.-3220   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:270

            digitalWrite(seg2, LOW);
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	b3 d9       	rcall	.-3226   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:271
            digitalWrite(seg3, LOW);
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	b0 d9       	rcall	.-3232   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:272
            digitalWrite(seg4, LOW);
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	88 e0       	ldi	r24, 0x08	; 8
     da0:	ad d9       	rcall	.-3238   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:273
            digitalWrite(seg5, LOW);
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	89 e0       	ldi	r24, 0x09	; 9
     da6:	aa d9       	rcall	.-3244   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:274
            digitalWrite(seg1, LOW);
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	85 e0       	ldi	r24, 0x05	; 5
     dac:	a7 d9       	rcall	.-3250   	; 0xfc <digitalWrite>
     dae:	07 e0       	ldi	r16, 0x07	; 7
     db0:	10 e0       	ldi	r17, 0x00	; 0
     db2:	9e cf       	rjmp	.-196    	; 0xcf0 <main+0x2e0>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:223

    switch (segNum)
    {
    case 1:
        // we Need To turn Off Other Segs When Displaying number on a segment.
        digitalWrite(seg1,HIGH);
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	85 e0       	ldi	r24, 0x05	; 5
     db8:	a1 d9       	rcall	.-3262   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:225

        digitalWrite(seg2,LOW);
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	86 e0       	ldi	r24, 0x06	; 6
     dbe:	9e d9       	rcall	.-3268   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:226
        digitalWrite(seg3,LOW);
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	87 e0       	ldi	r24, 0x07	; 7
     dc4:	9b d9       	rcall	.-3274   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:227
        digitalWrite(seg4, LOW);
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	88 e0       	ldi	r24, 0x08	; 8
     dca:	98 d9       	rcall	.-3280   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:228
        digitalWrite(seg5, LOW);
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	89 e0       	ldi	r24, 0x09	; 9
     dd0:	95 d9       	rcall	.-3286   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:229
        digitalWrite(seg6, LOW);
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	8a e0       	ldi	r24, 0x0A	; 10
     dd6:	92 d9       	rcall	.-3292   	; 0xfc <digitalWrite>
     dd8:	02 e0       	ldi	r16, 0x02	; 2
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	89 cf       	rjmp	.-238    	; 0xcf0 <main+0x2e0>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:232
        break;
        case 2:
            digitalWrite(seg2, HIGH);
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	86 e0       	ldi	r24, 0x06	; 6
     de2:	8c d9       	rcall	.-3304   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:234

            digitalWrite(seg1, LOW);
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	85 e0       	ldi	r24, 0x05	; 5
     de8:	89 d9       	rcall	.-3310   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:235
            digitalWrite(seg3, LOW);
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	87 e0       	ldi	r24, 0x07	; 7
     dee:	86 d9       	rcall	.-3316   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:236
            digitalWrite(seg4, LOW);
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	88 e0       	ldi	r24, 0x08	; 8
     df4:	83 d9       	rcall	.-3322   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:237
            digitalWrite(seg5, LOW);
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	89 e0       	ldi	r24, 0x09	; 9
     dfa:	80 d9       	rcall	.-3328   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:238
            digitalWrite(seg6, LOW);
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	8a e0       	ldi	r24, 0x0A	; 10
     e00:	7d d9       	rcall	.-3334   	; 0xfc <digitalWrite>
     e02:	03 e0       	ldi	r16, 0x03	; 3
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	74 cf       	rjmp	.-280    	; 0xcf0 <main+0x2e0>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:241
            break;
        case 3:
            digitalWrite(seg3, HIGH);
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	77 d9       	rcall	.-3346   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:243

            digitalWrite(seg1, LOW);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	74 d9       	rcall	.-3352   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:244
            digitalWrite(seg2, LOW);
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	86 e0       	ldi	r24, 0x06	; 6
     e18:	71 d9       	rcall	.-3358   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:245
            digitalWrite(seg4, LOW);
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	6e d9       	rcall	.-3364   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:246
            digitalWrite(seg5, LOW);
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	89 e0       	ldi	r24, 0x09	; 9
     e24:	6b d9       	rcall	.-3370   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:247
            digitalWrite(seg6, LOW);
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	8a e0       	ldi	r24, 0x0A	; 10
     e2a:	68 d9       	rcall	.-3376   	; 0xfc <digitalWrite>
     e2c:	04 e0       	ldi	r16, 0x04	; 4
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	5f cf       	rjmp	.-322    	; 0xcf0 <main+0x2e0>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:250
            break;
        case 4:
            digitalWrite(seg4, HIGH);
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	62 d9       	rcall	.-3388   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:252

            digitalWrite(seg2, LOW);
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	86 e0       	ldi	r24, 0x06	; 6
     e3c:	5f d9       	rcall	.-3394   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:253
            digitalWrite(seg3, LOW);
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	87 e0       	ldi	r24, 0x07	; 7
     e42:	5c d9       	rcall	.-3400   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:254
            digitalWrite(seg1, LOW);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	59 d9       	rcall	.-3406   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:255
            digitalWrite(seg5, LOW);
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	89 e0       	ldi	r24, 0x09	; 9
     e4e:	56 d9       	rcall	.-3412   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:256
            digitalWrite(seg6, LOW);
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	8a e0       	ldi	r24, 0x0A	; 10
     e54:	53 d9       	rcall	.-3418   	; 0xfc <digitalWrite>
     e56:	05 e0       	ldi	r16, 0x05	; 5
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	4a cf       	rjmp	.-364    	; 0xcf0 <main+0x2e0>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:259
            break;
        case 5:
            digitalWrite(seg5, HIGH);
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	89 e0       	ldi	r24, 0x09	; 9
     e60:	4d d9       	rcall	.-3430   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:261

            digitalWrite(seg2, LOW);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	4a d9       	rcall	.-3436   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:262
            digitalWrite(seg3, LOW);
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	87 e0       	ldi	r24, 0x07	; 7
     e6c:	47 d9       	rcall	.-3442   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:263
            digitalWrite(seg4, LOW);
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	88 e0       	ldi	r24, 0x08	; 8
     e72:	44 d9       	rcall	.-3448   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:264
            digitalWrite(seg1, LOW);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	85 e0       	ldi	r24, 0x05	; 5
     e78:	41 d9       	rcall	.-3454   	; 0xfc <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:265
            digitalWrite(seg6, LOW);
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	8a e0       	ldi	r24, 0x0A	; 10
     e7e:	3e d9       	rcall	.-3460   	; 0xfc <digitalWrite>
     e80:	06 e0       	ldi	r16, 0x06	; 6
     e82:	10 e0       	ldi	r17, 0x00	; 0
     e84:	35 cf       	rjmp	.-406    	; 0xcf0 <main+0x2e0>
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
     e86:	81 14       	cp	r8, r1
     e88:	91 04       	cpc	r9, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <main+0x47e>
     e8c:	6c ce       	rjmp	.-808    	; 0xb66 <main+0x156>
     e8e:	95 da       	rcall	.-2774   	; 0x3ba <Serial0_available()>
     e90:	88 23       	and	r24, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <main+0x486>
     e94:	61 ce       	rjmp	.-830    	; 0xb58 <main+0x148>
     e96:	b4 d8       	rcall	.-3736   	; 0x0 <__vectors>
     e98:	5f ce       	rjmp	.-834    	; 0xb58 <main+0x148>

00000e9a <_GLOBAL__sub_D_count>:
__static_initialization_and_destruction_0():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:71
    0b01110011, // P
    0b00110000 // i
};

// debug
String input = "";
     e9a:	83 e4       	ldi	r24, 0x43	; 67
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	ba db       	rcall	.-2188   	; 0x614 <String::~String()>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:51

//EEPROM
constexpr auto eep_addr = 0;

long count = 0;
String strnum;
     ea0:	89 e4       	ldi	r24, 0x49	; 73
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	b7 cb       	rjmp	.-2194   	; 0x614 <String::~String()>

00000ea6 <atol>:
atol():
     ea6:	1f 93       	push	r17
     ea8:	fc 01       	movw	r30, r24
     eaa:	99 27       	eor	r25, r25
     eac:	88 27       	eor	r24, r24
     eae:	bc 01       	movw	r22, r24
     eb0:	e8 94       	clt
     eb2:	11 91       	ld	r17, Z+
     eb4:	10 32       	cpi	r17, 0x20	; 32
     eb6:	e9 f3       	breq	.-6      	; 0xeb2 <atol+0xc>
     eb8:	19 30       	cpi	r17, 0x09	; 9
     eba:	10 f0       	brcs	.+4      	; 0xec0 <atol+0x1a>
     ebc:	1e 30       	cpi	r17, 0x0E	; 14
     ebe:	c8 f3       	brcs	.-14     	; 0xeb2 <atol+0xc>
     ec0:	1b 32       	cpi	r17, 0x2B	; 43
     ec2:	49 f0       	breq	.+18     	; 0xed6 <atol+0x30>
     ec4:	1d 32       	cpi	r17, 0x2D	; 45
     ec6:	41 f4       	brne	.+16     	; 0xed8 <atol+0x32>
     ec8:	68 94       	set
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <atol+0x30>
     ecc:	20 d0       	rcall	.+64     	; 0xf0e <__mulsi_const_10>
     ece:	61 0f       	add	r22, r17
     ed0:	71 1d       	adc	r23, r1
     ed2:	81 1d       	adc	r24, r1
     ed4:	91 1d       	adc	r25, r1
     ed6:	11 91       	ld	r17, Z+
     ed8:	10 53       	subi	r17, 0x30	; 48
     eda:	1a 30       	cpi	r17, 0x0A	; 10
     edc:	b8 f3       	brcs	.-18     	; 0xecc <atol+0x26>
     ede:	3e f4       	brtc	.+14     	; 0xeee <atol+0x48>
     ee0:	90 95       	com	r25
     ee2:	80 95       	com	r24
     ee4:	70 95       	com	r23
     ee6:	61 95       	neg	r22
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	8f 4f       	sbci	r24, 0xFF	; 255
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <__ltoa_ncheck>:
__ltoa_ncheck():
     ef2:	bb 27       	eor	r27, r27
     ef4:	2a 30       	cpi	r18, 0x0A	; 10
     ef6:	51 f4       	brne	.+20     	; 0xf0c <__ltoa_ncheck+0x1a>
     ef8:	99 23       	and	r25, r25
     efa:	42 f4       	brpl	.+16     	; 0xf0c <__ltoa_ncheck+0x1a>
     efc:	bd e2       	ldi	r27, 0x2D	; 45
     efe:	90 95       	com	r25
     f00:	80 95       	com	r24
     f02:	70 95       	com	r23
     f04:	61 95       	neg	r22
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	16 c0       	rjmp	.+44     	; 0xf3a <__ultoa_common>

00000f0e <__mulsi_const_10>:
__mulsi_const_10():
     f0e:	59 2f       	mov	r21, r25
     f10:	48 2f       	mov	r20, r24
     f12:	37 2f       	mov	r19, r23
     f14:	26 2f       	mov	r18, r22
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	66 0f       	add	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	62 0f       	add	r22, r18
     f28:	73 1f       	adc	r23, r19
     f2a:	84 1f       	adc	r24, r20
     f2c:	95 1f       	adc	r25, r21
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	08 95       	ret

00000f38 <__ultoa_ncheck>:
__ultoa_ncheck():
     f38:	bb 27       	eor	r27, r27

00000f3a <__ultoa_common>:
     f3a:	fa 01       	movw	r30, r20
     f3c:	a6 2f       	mov	r26, r22
     f3e:	62 17       	cp	r22, r18
     f40:	71 05       	cpc	r23, r1
     f42:	81 05       	cpc	r24, r1
     f44:	91 05       	cpc	r25, r1
     f46:	33 0b       	sbc	r19, r19
     f48:	30 fb       	bst	r19, 0
     f4a:	66 f0       	brts	.+24     	; 0xf64 <__ultoa_common+0x2a>
     f4c:	aa 27       	eor	r26, r26
     f4e:	66 0f       	add	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	88 1f       	adc	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	aa 1f       	adc	r26, r26
     f58:	a2 17       	cp	r26, r18
     f5a:	10 f0       	brcs	.+4      	; 0xf60 <__ultoa_common+0x26>
     f5c:	a2 1b       	sub	r26, r18
     f5e:	63 95       	inc	r22
     f60:	38 50       	subi	r19, 0x08	; 8
     f62:	a9 f7       	brne	.-22     	; 0xf4e <__ultoa_common+0x14>
     f64:	a0 5d       	subi	r26, 0xD0	; 208
     f66:	aa 33       	cpi	r26, 0x3A	; 58
     f68:	08 f0       	brcs	.+2      	; 0xf6c <__ultoa_common+0x32>
     f6a:	a9 5d       	subi	r26, 0xD9	; 217
     f6c:	a1 93       	st	Z+, r26
     f6e:	36 f7       	brtc	.-52     	; 0xf3c <__ultoa_common+0x2>
     f70:	b1 11       	cpse	r27, r1
     f72:	b1 93       	st	Z+, r27
     f74:	10 82       	st	Z, r1
     f76:	ca 01       	movw	r24, r20
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <strrev>

00000f7a <strrev>:
strrev():
     f7a:	dc 01       	movw	r26, r24
     f7c:	fc 01       	movw	r30, r24
     f7e:	67 2f       	mov	r22, r23
     f80:	71 91       	ld	r23, Z+
     f82:	77 23       	and	r23, r23
     f84:	e1 f7       	brne	.-8      	; 0xf7e <strrev+0x4>
     f86:	32 97       	sbiw	r30, 0x02	; 2
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <strrev+0x18>
     f8a:	7c 91       	ld	r23, X
     f8c:	6d 93       	st	X+, r22
     f8e:	70 83       	st	Z, r23
     f90:	62 91       	ld	r22, -Z
     f92:	ae 17       	cp	r26, r30
     f94:	bf 07       	cpc	r27, r31
     f96:	c8 f3       	brcs	.-14     	; 0xf8a <strrev+0x10>
     f98:	08 95       	ret

00000f9a <eeprom_read_byte>:
eeprom_read_byte():
     f9a:	e1 99       	sbic	0x1c, 1	; 28
     f9c:	fe cf       	rjmp	.-4      	; 0xf9a <eeprom_read_byte>
     f9e:	9f bb       	out	0x1f, r25	; 31
     fa0:	8e bb       	out	0x1e, r24	; 30
     fa2:	e0 9a       	sbi	0x1c, 0	; 28
     fa4:	99 27       	eor	r25, r25
     fa6:	8d b3       	in	r24, 0x1d	; 29
     fa8:	08 95       	ret

00000faa <eeprom_write_byte>:
eeprom_write_byte():
     faa:	26 2f       	mov	r18, r22

00000fac <eeprom_write_r18>:
     fac:	e1 99       	sbic	0x1c, 1	; 28
     fae:	fe cf       	rjmp	.-4      	; 0xfac <eeprom_write_r18>
     fb0:	9f bb       	out	0x1f, r25	; 31
     fb2:	8e bb       	out	0x1e, r24	; 30
     fb4:	2d bb       	out	0x1d, r18	; 29
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	e2 9a       	sbi	0x1c, 2	; 28
     fbc:	e1 9a       	sbi	0x1c, 1	; 28
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	08 95       	ret

00000fc4 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
     fc4:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
     fc6:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
     fc8:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
     fca:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
     fcc:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
     fce:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
     fd0:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
     fd2:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
     fd4:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
     fd6:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
     fd8:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
     fda:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
     fdc:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
     fde:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
     fe0:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
     fe2:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
     fe4:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
     fe6:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
     fe8:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
     fea:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
     fec:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
     fee:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
     ff0:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
     ff2:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
     ff4:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
     ff6:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
     ff8:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
     ffa:	09 94       	ijmp

00000ffc <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
     ffc:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
     ffe:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1000:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1002:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1004:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1006:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1008:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    100a:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    100c:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    100e:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1010:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1012:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1014:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1016:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1018:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    101a:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    101c:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    101e:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1020:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1022:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1024:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1026:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1028:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    102a:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    102c:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    102e:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1030:	08 95       	ret

00001032 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1032:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1034:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1036:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1038:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    103a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <__udivmodsi4_ep>

0000103e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    103e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1040:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1042:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1044:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1046:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1048:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    104a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    104c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    104e:	20 f0       	brcs	.+8      	; 0x1058 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1050:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1052:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1054:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1056:	f5 0b       	sbc	r31, r21

00001058 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1058:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    105a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    105c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    105e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1060:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1062:	69 f7       	brne	.-38     	; 0x103e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1064:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1066:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1068:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    106a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    106c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    106e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1070:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1072:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1074:	08 95       	ret

00001076 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1076:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1078:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    107a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    107c:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    107e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1080:	09 94       	ijmp

00001082 <malloc>:
malloc():
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	91 05       	cpc	r25, r1
    108e:	10 f4       	brcc	.+4      	; 0x1094 <malloc+0x12>
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <__flp>
    1098:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <__flp+0x1>
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	a0 e0       	ldi	r26, 0x00	; 0
    10a4:	30 97       	sbiw	r30, 0x00	; 0
    10a6:	99 f4       	brne	.+38     	; 0x10ce <malloc+0x4c>
    10a8:	21 15       	cp	r18, r1
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <malloc+0x2e>
    10ae:	4a c0       	rjmp	.+148    	; 0x1144 <malloc+0xc2>
    10b0:	28 1b       	sub	r18, r24
    10b2:	39 0b       	sbc	r19, r25
    10b4:	24 30       	cpi	r18, 0x04	; 4
    10b6:	31 05       	cpc	r19, r1
    10b8:	d8 f5       	brcc	.+118    	; 0x1130 <malloc+0xae>
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	61 15       	cp	r22, r1
    10c0:	71 05       	cpc	r23, r1
    10c2:	89 f1       	breq	.+98     	; 0x1126 <malloc+0xa4>
    10c4:	fb 01       	movw	r30, r22
    10c6:	93 83       	std	Z+3, r25	; 0x03
    10c8:	82 83       	std	Z+2, r24	; 0x02
    10ca:	fe 01       	movw	r30, r28
    10cc:	11 c0       	rjmp	.+34     	; 0x10f0 <malloc+0x6e>
    10ce:	40 81       	ld	r20, Z
    10d0:	51 81       	ldd	r21, Z+1	; 0x01
    10d2:	02 81       	ldd	r16, Z+2	; 0x02
    10d4:	13 81       	ldd	r17, Z+3	; 0x03
    10d6:	48 17       	cp	r20, r24
    10d8:	59 07       	cpc	r21, r25
    10da:	e0 f0       	brcs	.+56     	; 0x1114 <malloc+0x92>
    10dc:	48 17       	cp	r20, r24
    10de:	59 07       	cpc	r21, r25
    10e0:	99 f4       	brne	.+38     	; 0x1108 <malloc+0x86>
    10e2:	10 97       	sbiw	r26, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <malloc+0x7c>
    10e6:	12 96       	adiw	r26, 0x02	; 2
    10e8:	0c 93       	st	X, r16
    10ea:	12 97       	sbiw	r26, 0x02	; 2
    10ec:	13 96       	adiw	r26, 0x03	; 3
    10ee:	1c 93       	st	X, r17
    10f0:	32 96       	adiw	r30, 0x02	; 2
    10f2:	cf 01       	movw	r24, r30
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret
    10fe:	00 93 51 01 	sts	0x0151, r16	; 0x800151 <__flp>
    1102:	10 93 52 01 	sts	0x0152, r17	; 0x800152 <__flp+0x1>
    1106:	f4 cf       	rjmp	.-24     	; 0x10f0 <malloc+0x6e>
    1108:	21 15       	cp	r18, r1
    110a:	31 05       	cpc	r19, r1
    110c:	51 f0       	breq	.+20     	; 0x1122 <malloc+0xa0>
    110e:	42 17       	cp	r20, r18
    1110:	53 07       	cpc	r21, r19
    1112:	38 f0       	brcs	.+14     	; 0x1122 <malloc+0xa0>
    1114:	a9 01       	movw	r20, r18
    1116:	db 01       	movw	r26, r22
    1118:	9a 01       	movw	r18, r20
    111a:	bd 01       	movw	r22, r26
    111c:	df 01       	movw	r26, r30
    111e:	f8 01       	movw	r30, r16
    1120:	c1 cf       	rjmp	.-126    	; 0x10a4 <malloc+0x22>
    1122:	ef 01       	movw	r28, r30
    1124:	f9 cf       	rjmp	.-14     	; 0x1118 <malloc+0x96>
    1126:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <__flp+0x1>
    112a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <__flp>
    112e:	cd cf       	rjmp	.-102    	; 0x10ca <malloc+0x48>
    1130:	fe 01       	movw	r30, r28
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	81 93       	st	Z+, r24
    1138:	91 93       	st	Z+, r25
    113a:	22 50       	subi	r18, 0x02	; 2
    113c:	31 09       	sbc	r19, r1
    113e:	39 83       	std	Y+1, r19	; 0x01
    1140:	28 83       	st	Y, r18
    1142:	d7 cf       	rjmp	.-82     	; 0x10f2 <malloc+0x70>
    1144:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
    1148:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
    114c:	23 2b       	or	r18, r19
    114e:	41 f4       	brne	.+16     	; 0x1160 <malloc+0xde>
    1150:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__malloc_heap_start>
    1154:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__malloc_heap_start+0x1>
    1158:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <__brkval+0x1>
    115c:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <__brkval>
    1160:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__malloc_heap_end>
    1164:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__malloc_heap_end+0x1>
    1168:	21 15       	cp	r18, r1
    116a:	31 05       	cpc	r19, r1
    116c:	41 f4       	brne	.+16     	; 0x117e <malloc+0xfc>
    116e:	2d b7       	in	r18, 0x3d	; 61
    1170:	3e b7       	in	r19, 0x3e	; 62
    1172:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <__malloc_margin>
    1176:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <__malloc_margin+0x1>
    117a:	24 1b       	sub	r18, r20
    117c:	35 0b       	sbc	r19, r21
    117e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <__brkval>
    1182:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <__brkval+0x1>
    1186:	e2 17       	cp	r30, r18
    1188:	f3 07       	cpc	r31, r19
    118a:	a0 f4       	brcc	.+40     	; 0x11b4 <malloc+0x132>
    118c:	2e 1b       	sub	r18, r30
    118e:	3f 0b       	sbc	r19, r31
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	78 f0       	brcs	.+30     	; 0x11b4 <malloc+0x132>
    1196:	ac 01       	movw	r20, r24
    1198:	4e 5f       	subi	r20, 0xFE	; 254
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	24 17       	cp	r18, r20
    119e:	35 07       	cpc	r19, r21
    11a0:	48 f0       	brcs	.+18     	; 0x11b4 <malloc+0x132>
    11a2:	4e 0f       	add	r20, r30
    11a4:	5f 1f       	adc	r21, r31
    11a6:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <__brkval+0x1>
    11aa:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <__brkval>
    11ae:	81 93       	st	Z+, r24
    11b0:	91 93       	st	Z+, r25
    11b2:	9f cf       	rjmp	.-194    	; 0x10f2 <malloc+0x70>
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	e0 e0       	ldi	r30, 0x00	; 0
    11b8:	9c cf       	rjmp	.-200    	; 0x10f2 <malloc+0x70>

000011ba <free>:
free():
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	e9 f0       	breq	.+58     	; 0x11fc <free+0x42>
    11c2:	fc 01       	movw	r30, r24
    11c4:	32 97       	sbiw	r30, 0x02	; 2
    11c6:	13 82       	std	Z+3, r1	; 0x03
    11c8:	12 82       	std	Z+2, r1	; 0x02
    11ca:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <__flp>
    11ce:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <__flp+0x1>
    11d2:	ed 01       	movw	r28, r26
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	10 97       	sbiw	r26, 0x00	; 0
    11da:	a1 f4       	brne	.+40     	; 0x1204 <free+0x4a>
    11dc:	20 81       	ld	r18, Z
    11de:	31 81       	ldd	r19, Z+1	; 0x01
    11e0:	82 0f       	add	r24, r18
    11e2:	93 1f       	adc	r25, r19
    11e4:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
    11e8:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <free+0x3a>
    11f2:	61 c0       	rjmp	.+194    	; 0x12b6 <free+0xfc>
    11f4:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <__brkval+0x1>
    11f8:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <__brkval>
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret
    1202:	ea 01       	movw	r28, r20
    1204:	ce 17       	cp	r28, r30
    1206:	df 07       	cpc	r29, r31
    1208:	e8 f5       	brcc	.+122    	; 0x1284 <free+0xca>
    120a:	4a 81       	ldd	r20, Y+2	; 0x02
    120c:	5b 81       	ldd	r21, Y+3	; 0x03
    120e:	9e 01       	movw	r18, r28
    1210:	41 15       	cp	r20, r1
    1212:	51 05       	cpc	r21, r1
    1214:	b1 f7       	brne	.-20     	; 0x1202 <free+0x48>
    1216:	e9 01       	movw	r28, r18
    1218:	fb 83       	std	Y+3, r31	; 0x03
    121a:	ea 83       	std	Y+2, r30	; 0x02
    121c:	49 91       	ld	r20, Y+
    121e:	59 91       	ld	r21, Y+
    1220:	c4 0f       	add	r28, r20
    1222:	d5 1f       	adc	r29, r21
    1224:	ec 17       	cp	r30, r28
    1226:	fd 07       	cpc	r31, r29
    1228:	61 f4       	brne	.+24     	; 0x1242 <free+0x88>
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	02 96       	adiw	r24, 0x02	; 2
    1230:	84 0f       	add	r24, r20
    1232:	95 1f       	adc	r25, r21
    1234:	e9 01       	movw	r28, r18
    1236:	99 83       	std	Y+1, r25	; 0x01
    1238:	88 83       	st	Y, r24
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	9b 83       	std	Y+3, r25	; 0x03
    1240:	8a 83       	std	Y+2, r24	; 0x02
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	e0 e0       	ldi	r30, 0x00	; 0
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	8d 91       	ld	r24, X+
    124a:	9c 91       	ld	r25, X
    124c:	13 97       	sbiw	r26, 0x03	; 3
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	b9 f5       	brne	.+110    	; 0x12c0 <free+0x106>
    1252:	2d 91       	ld	r18, X+
    1254:	3c 91       	ld	r19, X
    1256:	11 97       	sbiw	r26, 0x01	; 1
    1258:	cd 01       	movw	r24, r26
    125a:	02 96       	adiw	r24, 0x02	; 2
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
    1264:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	39 f6       	brne	.-114    	; 0x11fc <free+0x42>
    126e:	30 97       	sbiw	r30, 0x00	; 0
    1270:	51 f5       	brne	.+84     	; 0x12c6 <free+0x10c>
    1272:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__flp+0x1>
    1276:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <__flp>
    127a:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <__brkval+0x1>
    127e:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <__brkval>
    1282:	bc cf       	rjmp	.-136    	; 0x11fc <free+0x42>
    1284:	d3 83       	std	Z+3, r29	; 0x03
    1286:	c2 83       	std	Z+2, r28	; 0x02
    1288:	40 81       	ld	r20, Z
    128a:	51 81       	ldd	r21, Z+1	; 0x01
    128c:	84 0f       	add	r24, r20
    128e:	95 1f       	adc	r25, r21
    1290:	c8 17       	cp	r28, r24
    1292:	d9 07       	cpc	r29, r25
    1294:	61 f4       	brne	.+24     	; 0x12ae <free+0xf4>
    1296:	4e 5f       	subi	r20, 0xFE	; 254
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	88 81       	ld	r24, Y
    129c:	99 81       	ldd	r25, Y+1	; 0x01
    129e:	48 0f       	add	r20, r24
    12a0:	59 1f       	adc	r21, r25
    12a2:	51 83       	std	Z+1, r21	; 0x01
    12a4:	40 83       	st	Z, r20
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	93 83       	std	Z+3, r25	; 0x03
    12ac:	82 83       	std	Z+2, r24	; 0x02
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <free+0xfc>
    12b4:	b0 cf       	rjmp	.-160    	; 0x1216 <free+0x5c>
    12b6:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__flp+0x1>
    12ba:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__flp>
    12be:	9e cf       	rjmp	.-196    	; 0x11fc <free+0x42>
    12c0:	fd 01       	movw	r30, r26
    12c2:	dc 01       	movw	r26, r24
    12c4:	c0 cf       	rjmp	.-128    	; 0x1246 <free+0x8c>
    12c6:	13 82       	std	Z+3, r1	; 0x03
    12c8:	12 82       	std	Z+2, r1	; 0x02
    12ca:	d7 cf       	rjmp	.-82     	; 0x127a <free+0xc0>

000012cc <realloc>:
realloc():
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	eb e6       	ldi	r30, 0x6B	; 107
    12d2:	f9 e0       	ldi	r31, 0x09	; 9
    12d4:	79 ce       	rjmp	.-782    	; 0xfc8 <__prologue_saves__+0x4>
    12d6:	8c 01       	movw	r16, r24
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	41 f4       	brne	.+16     	; 0x12ec <realloc+0x20>
    12dc:	cb 01       	movw	r24, r22
    12de:	d1 de       	rcall	.-606    	; 0x1082 <malloc>
    12e0:	8c 01       	movw	r16, r24
    12e2:	c8 01       	movw	r24, r16
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	e0 e1       	ldi	r30, 0x10	; 16
    12ea:	8a ce       	rjmp	.-748    	; 0x1000 <__epilogue_restores__+0x4>
    12ec:	fc 01       	movw	r30, r24
    12ee:	e6 0f       	add	r30, r22
    12f0:	f7 1f       	adc	r31, r23
    12f2:	9c 01       	movw	r18, r24
    12f4:	22 50       	subi	r18, 0x02	; 2
    12f6:	31 09       	sbc	r19, r1
    12f8:	e2 17       	cp	r30, r18
    12fa:	f3 07       	cpc	r31, r19
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <realloc+0x34>
    12fe:	99 c0       	rjmp	.+306    	; 0x1432 <realloc+0x166>
    1300:	d9 01       	movw	r26, r18
    1302:	cd 91       	ld	r28, X+
    1304:	dc 91       	ld	r29, X
    1306:	11 97       	sbiw	r26, 0x01	; 1
    1308:	c6 17       	cp	r28, r22
    130a:	d7 07       	cpc	r29, r23
    130c:	90 f0       	brcs	.+36     	; 0x1332 <realloc+0x66>
    130e:	c5 30       	cpi	r28, 0x05	; 5
    1310:	d1 05       	cpc	r29, r1
    1312:	38 f3       	brcs	.-50     	; 0x12e2 <realloc+0x16>
    1314:	ce 01       	movw	r24, r28
    1316:	04 97       	sbiw	r24, 0x04	; 4
    1318:	86 17       	cp	r24, r22
    131a:	97 07       	cpc	r25, r23
    131c:	10 f3       	brcs	.-60     	; 0x12e2 <realloc+0x16>
    131e:	c6 1b       	sub	r28, r22
    1320:	d7 0b       	sbc	r29, r23
    1322:	22 97       	sbiw	r28, 0x02	; 2
    1324:	c1 93       	st	Z+, r28
    1326:	d1 93       	st	Z+, r29
    1328:	6d 93       	st	X+, r22
    132a:	7c 93       	st	X, r23
    132c:	cf 01       	movw	r24, r30
    132e:	45 df       	rcall	.-374    	; 0x11ba <free>
    1330:	d8 cf       	rjmp	.-80     	; 0x12e2 <realloc+0x16>
    1332:	5b 01       	movw	r10, r22
    1334:	ac 1a       	sub	r10, r28
    1336:	bd 0a       	sbc	r11, r29
    1338:	4c 01       	movw	r8, r24
    133a:	8c 0e       	add	r8, r28
    133c:	9d 1e       	adc	r9, r29
    133e:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <__flp>
    1342:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <__flp+0x1>
    1346:	51 2c       	mov	r5, r1
    1348:	41 2c       	mov	r4, r1
    134a:	f1 2c       	mov	r15, r1
    134c:	e1 2c       	mov	r14, r1
    134e:	10 97       	sbiw	r26, 0x00	; 0
    1350:	31 f5       	brne	.+76     	; 0x139e <realloc+0xd2>
    1352:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__brkval>
    1356:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__brkval+0x1>
    135a:	88 15       	cp	r24, r8
    135c:	99 05       	cpc	r25, r9
    135e:	09 f0       	breq	.+2      	; 0x1362 <realloc+0x96>
    1360:	5c c0       	rjmp	.+184    	; 0x141a <realloc+0x14e>
    1362:	46 16       	cp	r4, r22
    1364:	57 06       	cpc	r5, r23
    1366:	08 f0       	brcs	.+2      	; 0x136a <realloc+0x9e>
    1368:	58 c0       	rjmp	.+176    	; 0x141a <realloc+0x14e>
    136a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__malloc_heap_end>
    136e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__malloc_heap_end+0x1>
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	41 f4       	brne	.+16     	; 0x1386 <realloc+0xba>
    1376:	8d b7       	in	r24, 0x3d	; 61
    1378:	9e b7       	in	r25, 0x3e	; 62
    137a:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <__malloc_margin>
    137e:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <__malloc_margin+0x1>
    1382:	84 1b       	sub	r24, r20
    1384:	95 0b       	sbc	r25, r21
    1386:	e8 17       	cp	r30, r24
    1388:	f9 07       	cpc	r31, r25
    138a:	08 f0       	brcs	.+2      	; 0x138e <realloc+0xc2>
    138c:	52 c0       	rjmp	.+164    	; 0x1432 <realloc+0x166>
    138e:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <__brkval+0x1>
    1392:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <__brkval>
    1396:	f9 01       	movw	r30, r18
    1398:	71 83       	std	Z+1, r23	; 0x01
    139a:	60 83       	st	Z, r22
    139c:	a2 cf       	rjmp	.-188    	; 0x12e2 <realloc+0x16>
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	11 97       	sbiw	r26, 0x01	; 1
    13a4:	12 96       	adiw	r26, 0x02	; 2
    13a6:	6c 90       	ld	r6, X
    13a8:	12 97       	sbiw	r26, 0x02	; 2
    13aa:	13 96       	adiw	r26, 0x03	; 3
    13ac:	7c 90       	ld	r7, X
    13ae:	13 97       	sbiw	r26, 0x03	; 3
    13b0:	a8 15       	cp	r26, r8
    13b2:	b9 05       	cpc	r27, r9
    13b4:	59 f5       	brne	.+86     	; 0x140c <realloc+0x140>
    13b6:	6c 01       	movw	r12, r24
    13b8:	42 e0       	ldi	r20, 0x02	; 2
    13ba:	c4 0e       	add	r12, r20
    13bc:	d1 1c       	adc	r13, r1
    13be:	ca 14       	cp	r12, r10
    13c0:	db 04       	cpc	r13, r11
    13c2:	20 f1       	brcs	.+72     	; 0x140c <realloc+0x140>
    13c4:	ac 01       	movw	r20, r24
    13c6:	4a 19       	sub	r20, r10
    13c8:	5b 09       	sbc	r21, r11
    13ca:	da 01       	movw	r26, r20
    13cc:	12 96       	adiw	r26, 0x02	; 2
    13ce:	15 97       	sbiw	r26, 0x05	; 5
    13d0:	80 f0       	brcs	.+32     	; 0x13f2 <realloc+0x126>
    13d2:	62 82       	std	Z+2, r6	; 0x02
    13d4:	73 82       	std	Z+3, r7	; 0x03
    13d6:	51 83       	std	Z+1, r21	; 0x01
    13d8:	40 83       	st	Z, r20
    13da:	d9 01       	movw	r26, r18
    13dc:	6d 93       	st	X+, r22
    13de:	7c 93       	st	X, r23
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	71 f0       	breq	.+28     	; 0x1402 <realloc+0x136>
    13e6:	d7 01       	movw	r26, r14
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	fc 93       	st	X, r31
    13ec:	ee 93       	st	-X, r30
    13ee:	12 97       	sbiw	r26, 0x02	; 2
    13f0:	78 cf       	rjmp	.-272    	; 0x12e2 <realloc+0x16>
    13f2:	22 96       	adiw	r28, 0x02	; 2
    13f4:	8c 0f       	add	r24, r28
    13f6:	9d 1f       	adc	r25, r29
    13f8:	f9 01       	movw	r30, r18
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
    13fe:	f3 01       	movw	r30, r6
    1400:	ef cf       	rjmp	.-34     	; 0x13e0 <realloc+0x114>
    1402:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__flp+0x1>
    1406:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__flp>
    140a:	6b cf       	rjmp	.-298    	; 0x12e2 <realloc+0x16>
    140c:	48 16       	cp	r4, r24
    140e:	59 06       	cpc	r5, r25
    1410:	08 f4       	brcc	.+2      	; 0x1414 <realloc+0x148>
    1412:	2c 01       	movw	r4, r24
    1414:	7d 01       	movw	r14, r26
    1416:	d3 01       	movw	r26, r6
    1418:	9a cf       	rjmp	.-204    	; 0x134e <realloc+0x82>
    141a:	cb 01       	movw	r24, r22
    141c:	32 de       	rcall	.-924    	; 0x1082 <malloc>
    141e:	7c 01       	movw	r14, r24
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	39 f0       	breq	.+14     	; 0x1432 <realloc+0x166>
    1424:	ae 01       	movw	r20, r28
    1426:	b8 01       	movw	r22, r16
    1428:	07 d0       	rcall	.+14     	; 0x1438 <memcpy>
    142a:	c8 01       	movw	r24, r16
    142c:	c6 de       	rcall	.-628    	; 0x11ba <free>
    142e:	87 01       	movw	r16, r14
    1430:	58 cf       	rjmp	.-336    	; 0x12e2 <realloc+0x16>
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	00 e0       	ldi	r16, 0x00	; 0
    1436:	55 cf       	rjmp	.-342    	; 0x12e2 <realloc+0x16>

00001438 <memcpy>:
memcpy():
    1438:	fb 01       	movw	r30, r22
    143a:	dc 01       	movw	r26, r24
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <memcpy+0xa>
    143e:	01 90       	ld	r0, Z+
    1440:	0d 92       	st	X+, r0
    1442:	41 50       	subi	r20, 0x01	; 1
    1444:	50 40       	sbci	r21, 0x00	; 0
    1446:	d8 f7       	brcc	.-10     	; 0x143e <memcpy+0x6>
    1448:	08 95       	ret

0000144a <strcpy>:
strcpy():
    144a:	fb 01       	movw	r30, r22
    144c:	dc 01       	movw	r26, r24
    144e:	01 90       	ld	r0, Z+
    1450:	0d 92       	st	X+, r0
    1452:	00 20       	and	r0, r0
    1454:	e1 f7       	brne	.-8      	; 0x144e <strcpy+0x4>
    1456:	08 95       	ret

00001458 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1458:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    145a:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    145c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1460:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1462:	09 de       	rcall	.-1006   	; 0x1076 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1464:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1466:	c7 34       	cpi	r28, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1468:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    146a:	d1 f7       	brne	.-12     	; 0x1460 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    146c:	f8 94       	cli

0000146e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    146e:	ff cf       	rjmp	.-2      	; 0x146e <__stop_program>
