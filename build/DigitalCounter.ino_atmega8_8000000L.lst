
H:\Arduino\projects\DigitalCounter\build/DigitalCounter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	46 c0       	rjmp	.+140    	; 0x8e <__dtors_end>
   2:	eb c2       	rjmp	.+1494   	; 0x5da <__vector_1>
   4:	c3 c2       	rjmp	.+1414   	; 0x58c <__vector_2>
   6:	68 c0       	rjmp	.+208    	; 0xd8 <__bad_interrupt>
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	66 c0       	rjmp	.+204    	; 0xd8 <__bad_interrupt>
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	64 c0       	rjmp	.+200    	; 0xd8 <__bad_interrupt>
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	72 c2       	rjmp	.+1252   	; 0x4f8 <__vector_9>
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	60 c0       	rjmp	.+192    	; 0xd8 <__bad_interrupt>
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	5e c0       	rjmp	.+188    	; 0xd8 <__bad_interrupt>
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	5c c0       	rjmp	.+184    	; 0xd8 <__bad_interrupt>
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	5a c0       	rjmp	.+180    	; 0xd8 <__bad_interrupt>
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
  26:	00 00       	nop
  28:	00 00       	nop
  2a:	37 00       	.word	0x0037	; ????
  2c:	34 00       	.word	0x0034	; ????
  2e:	31 00       	.word	0x0031	; ????

00000030 <port_to_output_PGM>:
  30:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

0000003a <port_to_input_PGM>:
  3a:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000044 <digital_pin_to_port_PGM>:
  44:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  54:	03 03 03 03 02 02 03                                .......

0000005b <digital_pin_to_bit_mask_PGM>:
  5b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  6b:	04 08 10 20 40 80 40                                ... @.@

00000072 <digital_pin_to_timer_PGM>:
	...
  7a:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000008a <__ctors_start>:
__ctors_start():
  8a:	19 05       	cpc	r17, r9

0000008c <__ctors_end>:
__dtors_start():
  8c:	27 05       	cpc	r18, r7

0000008e <__dtors_end>:
__dtors_end():
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf e5       	ldi	r28, 0x5F	; 95
  94:	d4 e0       	ldi	r29, 0x04	; 4
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  9a:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  9c:	ac e7       	ldi	r26, 0x7C	; 124
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  9e:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  a4:	a5 39       	cpi	r26, 0x95	; 149
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  a6:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>

000000aa <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  aa:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  ac:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  ae:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  b0:	ee eb       	ldi	r30, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  b2:	ff e0       	ldi	r31, 0x0F	; 15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  b6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  b8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  ba:	ac 37       	cpi	r26, 0x7C	; 124
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  bc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  c0:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  c2:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  c4:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  c6:	03 c0       	rjmp	.+6      	; 0xce <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  c8:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  ca:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  cc:	7b d5       	rcall	.+2806   	; 0xbc4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  ce:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  d0:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
  d2:	d1 f7       	brne	.-12     	; 0xc8 <__do_global_ctors+0x8>
  d4:	a9 d2       	rcall	.+1362   	; 0x628 <main>
  d6:	67 c7       	rjmp	.+3790   	; 0xfa6 <__do_global_dtors>

000000d8 <__bad_interrupt>:
__vector_12():
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <turnOffPWM>:
turnOffPWM():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
  da:	85 30       	cpi	r24, 0x05	; 5
  dc:	41 f0       	breq	.+16     	; 0xee <turnOffPWM+0x14>
  de:	87 30       	cpi	r24, 0x07	; 7
  e0:	49 f0       	breq	.+18     	; 0xf4 <turnOffPWM+0x1a>
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	51 f4       	brne	.+20     	; 0xfa <turnOffPWM+0x20>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
  e6:	8f b5       	in	r24, 0x2f	; 47
  e8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
  ea:	8f bd       	out	0x2f, r24	; 47
  ec:	08 95       	ret
  ee:	8f b5       	in	r24, 0x2f	; 47
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	fb cf       	rjmp	.-10     	; 0xea <turnOffPWM+0x10>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
  f4:	85 b5       	in	r24, 0x25	; 37
  f6:	8f 7d       	andi	r24, 0xDF	; 223
  f8:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
  fa:	08 95       	ret

000000fc <digitalRead>:
digitalRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	ee 58       	subi	r30, 0x8E	; 142
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
 10c:	f9 01       	movw	r30, r18
 10e:	e5 5a       	subi	r30, 0xA5	; 165
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
 114:	f9 01       	movw	r30, r18
 116:	ec 5b       	subi	r30, 0xBC	; 188
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
 11c:	cc 23       	and	r28, r28
 11e:	99 f0       	breq	.+38     	; 0x146 <digitalRead+0x4a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 120:	81 11       	cpse	r24, r1
 122:	db df       	rcall	.-74     	; 0xda <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
 124:	ec 2f       	mov	r30, r28
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e6 5c       	subi	r30, 0xC6	; 198
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	a5 91       	lpm	r26, Z+
 132:	b4 91       	lpm	r27, Z
 134:	ec 91       	ld	r30, X
 136:	ed 23       	and	r30, r29
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	09 f4       	brne	.+2      	; 0x140 <digitalRead+0x44>
 13e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fa cf       	rjmp	.-12     	; 0x140 <digitalRead+0x44>

0000014c <digitalWrite>:
digitalWrite():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	ee 58       	subi	r30, 0x8E	; 142
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 15e:	f9 01       	movw	r30, r18
 160:	e5 5a       	subi	r30, 0xA5	; 165
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 166:	f9 01       	movw	r30, r18
 168:	ec 5b       	subi	r30, 0xBC	; 188
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 16e:	cc 23       	and	r28, r28
 170:	a1 f0       	breq	.+40     	; 0x19a <digitalWrite+0x4e>
 172:	16 2f       	mov	r17, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 174:	81 11       	cpse	r24, r1
 176:	b1 df       	rcall	.-158    	; 0xda <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 178:	ec 2f       	mov	r30, r28
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e0 5d       	subi	r30, 0xD0	; 208
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	a5 91       	lpm	r26, Z+
 186:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 188:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 18a:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 18c:	ec 91       	ld	r30, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 18e:	11 11       	cpse	r17, r1
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <digitalWrite+0x56>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 192:	d0 95       	com	r29
 194:	de 23       	and	r29, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 196:	dc 93       	st	X, r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 198:	8f bf       	out	0x3f, r24	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 1a2:	de 2b       	or	r29, r30
 1a4:	f8 cf       	rjmp	.-16     	; 0x196 <digitalWrite+0x4a>

000001a6 <pinMode>:
pinMode():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	e5 5a       	subi	r30, 0xA5	; 165
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	24 91       	lpm	r18, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 1b4:	8c 5b       	subi	r24, 0xBC	; 188
 1b6:	9f 4f       	sbci	r25, 0xFF	; 255
 1b8:	fc 01       	movw	r30, r24
 1ba:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 1bc:	88 23       	and	r24, r24
 1be:	d1 f0       	breq	.+52     	; 0x1f4 <pinMode+0x4e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	fc 01       	movw	r30, r24
 1c8:	ea 5d       	subi	r30, 0xDA	; 218
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	a5 91       	lpm	r26, Z+
 1ce:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 1d0:	fc 01       	movw	r30, r24
 1d2:	e0 5d       	subi	r30, 0xD0	; 208
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	c5 91       	lpm	r28, Z+
 1d8:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 1da:	61 11       	cpse	r22, r1
 1dc:	0e c0       	rjmp	.+28     	; 0x1fa <pinMode+0x54>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 1de:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
 1e0:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 1e2:	8c 91       	ld	r24, X
 1e4:	e2 2f       	mov	r30, r18
 1e6:	e0 95       	com	r30
 1e8:	8e 23       	and	r24, r30
 1ea:	8c 93       	st	X, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 1ec:	28 81       	ld	r18, Y
 1ee:	e2 23       	and	r30, r18
 1f0:	e8 83       	st	Y, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
 1f2:	9f bf       	out	0x3f, r25	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 1fa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 1fc:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 1fe:	ec 91       	ld	r30, X
 200:	e2 2b       	or	r30, r18
 202:	ec 93       	st	X, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 204:	8f bf       	out	0x3f, r24	; 63
 206:	f6 cf       	rjmp	.-20     	; 0x1f4 <pinMode+0x4e>

00000208 <micros>:
micros():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
 208:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
 20a:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
 20c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <timer0_overflow_count>
 210:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <timer0_overflow_count+0x1>
 214:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <timer0_overflow_count+0x2>
 218:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
 21c:	22 b7       	in	r18, 0x32	; 50
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
 21e:	08 b6       	in	r0, 0x38	; 56
 220:	00 fe       	sbrs	r0, 0
 222:	05 c0       	rjmp	.+10     	; 0x22e <micros+0x26>
 224:	2f 3f       	cpi	r18, 0xFF	; 255
 226:	19 f0       	breq	.+6      	; 0x22e <micros+0x26>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	a1 1d       	adc	r26, r1
 22c:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
 22e:	3f bf       	out	0x3f, r19	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
 230:	ba 2f       	mov	r27, r26
 232:	a9 2f       	mov	r26, r25
 234:	98 2f       	mov	r25, r24
 236:	88 27       	eor	r24, r24
 238:	bc 01       	movw	r22, r24
 23a:	cd 01       	movw	r24, r26
 23c:	62 0f       	add	r22, r18
 23e:	71 1d       	adc	r23, r1
 240:	81 1d       	adc	r24, r1
 242:	91 1d       	adc	r25, r1
 244:	43 e0       	ldi	r20, 0x03	; 3
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	4a 95       	dec	r20
 250:	d1 f7       	brne	.-12     	; 0x246 <micros+0x3e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
 252:	08 95       	ret

00000254 <delay>:
delay():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	6b 01       	movw	r12, r22
 266:	7c 01       	movw	r14, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
 268:	cf df       	rcall	.-98     	; 0x208 <micros>
 26a:	4b 01       	movw	r8, r22
 26c:	5c 01       	movw	r10, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 26e:	c1 14       	cp	r12, r1
 270:	d1 04       	cpc	r13, r1
 272:	e1 04       	cpc	r14, r1
 274:	f1 04       	cpc	r15, r1
 276:	b1 f0       	breq	.+44     	; 0x2a4 <delay+0x50>
 278:	c7 df       	rcall	.-114    	; 0x208 <micros>
 27a:	68 19       	sub	r22, r8
 27c:	79 09       	sbc	r23, r9
 27e:	8a 09       	sbc	r24, r10
 280:	9b 09       	sbc	r25, r11
 282:	68 3e       	cpi	r22, 0xE8	; 232
 284:	73 40       	sbci	r23, 0x03	; 3
 286:	81 05       	cpc	r24, r1
 288:	91 05       	cpc	r25, r1
 28a:	88 f3       	brcs	.-30     	; 0x26e <delay+0x1a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	c2 1a       	sub	r12, r18
 290:	d1 08       	sbc	r13, r1
 292:	e1 08       	sbc	r14, r1
 294:	f1 08       	sbc	r15, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
 296:	88 ee       	ldi	r24, 0xE8	; 232
 298:	88 0e       	add	r8, r24
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	98 1e       	adc	r9, r24
 29e:	a1 1c       	adc	r10, r1
 2a0:	b1 1c       	adc	r11, r1
 2a2:	e5 cf       	rjmp	.-54     	; 0x26e <delay+0x1a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	bf 90       	pop	r11
 2ae:	af 90       	pop	r10
 2b0:	9f 90       	pop	r9
 2b2:	8f 90       	pop	r8
 2b4:	08 95       	ret

000002b6 <String::StringIfHelper() const>:
_ZNK6String14StringIfHelperEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
 2b6:	08 95       	ret

000002b8 <ResetCounter()>:
_Z12ResetCounterv():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:223
      for (unsigned int i = eep_addr; i < sizeof(unsigned long); ++i)
      {
          EEPROM.write(i, 0);
          
      }
      count = 0;
 2b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count>
 2bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count+0x1>
 2c0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <count+0x2>
 2c4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <count+0x3>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:225
      //}
}
 2c8:	08 95       	ret

000002ca <nothing>:
nothing():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
 2ca:	08 95       	ret

000002cc <ReadSensor()>:
_Z10ReadSensorv():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:197

//ISR functions
void ReadSensor()
{
    //Serial.print("sensor... ");
    if((digitalRead(senseIn)) == HIGH)
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	16 df       	rcall	.-468    	; 0xfc <digitalRead>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	d1 f4       	brne	.+52     	; 0x308 <ReadSensor()+0x3c>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:199
    {
      if(bisSensLow)
 2d4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 2d8:	88 23       	and	r24, r24
 2da:	c9 f0       	breq	.+50     	; 0x30e <ReadSensor()+0x42>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:202
      {
         // Serial.println("adding... ");
          count++;
 2dc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <count>
 2e0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <count+0x1>
 2e4:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <count+0x2>
 2e8:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <count+0x3>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	a1 1d       	adc	r26, r1
 2f0:	b1 1d       	adc	r27, r1
 2f2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <count>
 2f6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <count+0x1>
 2fa:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <count+0x2>
 2fe:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <count+0x3>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:203
          bisSensLow = false;
 302:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
 306:	08 95       	ret
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:209
      }
    }
    else
    {
      //  Serial.println("setting to low... ");
        bisSensLow = true;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:211
    }
}
 30e:	08 95       	ret

00000310 <shiftOut.constprop.8>:
shiftOut.constprop.8():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:40
    digitalWrite(clockPin, LOW);
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	d8 2f       	mov	r29, r24
 316:	c8 e0       	ldi	r28, 0x08	; 8
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST) {
      digitalWrite(dataPin, val & 1);
 318:	6d 2f       	mov	r22, r29
 31a:	61 70       	andi	r22, 0x01	; 1
 31c:	8a e0       	ldi	r24, 0x0A	; 10
 31e:	16 df       	rcall	.-468    	; 0x14c <digitalWrite>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:47
      val >>= 1;
 320:	d6 95       	lsr	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:52
      } else {
      digitalWrite(dataPin, (val & 0x80) != 0);
      val <<= 1;
    }
    digitalWrite(clockPin, HIGH);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	8b e0       	ldi	r24, 0x0B	; 11
 326:	12 df       	rcall	.-476    	; 0x14c <digitalWrite>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:53
    digitalWrite(clockPin, LOW);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	8b e0       	ldi	r24, 0x0B	; 11
 32c:	0f df       	rcall	.-482    	; 0x14c <digitalWrite>
 32e:	c1 50       	subi	r28, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 330:	99 f7       	brne	.-26     	; 0x318 <shiftOut.constprop.8+0x8>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_shift.c:55
      val <<= 1;
    }
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <displayDigitOnSegment(int, unsigned char)>:
_Z21displayDigitOnSegmentih():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:298
        digitalWrite(seg6, HIGH);
        //}
}

void displayDigitOnSegment(int segNum,uint8_t num)
{
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	ec 01       	movw	r28, r24
 340:	16 2f       	mov	r17, r22
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:301
    // First we need To Shift out our number.
    // and just need one time per draw.
    if (bisMicroDelay == true)
 342:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <bisMicroDelay>
 346:	81 11       	cpse	r24, r1
 348:	09 c0       	rjmp	.+18     	; 0x35c <displayDigitOnSegment(int, unsigned char)+0x24>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:306
    {
      // delayMicroseconds(delayTime);
    }else
    {
    delay(delayTime); // A bit Delay.
 34a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delayTime>
 34e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delayTime+0x1>
 352:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delayTime+0x2>
 356:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delayTime+0x3>
 35a:	7c df       	rcall	.-264    	; 0x254 <delay>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:308
    }
    shiftOut(data, clock, LSBFIRST, digits[num]);
 35c:	e1 2f       	mov	r30, r17
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	e2 59       	subi	r30, 0x92	; 146
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	80 81       	ld	r24, Z
 366:	d4 df       	rcall	.-88     	; 0x310 <shiftOut.constprop.8>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:310
    
    switch (segNum)
 368:	c3 30       	cpi	r28, 0x03	; 3
 36a:	d1 05       	cpc	r29, r1
 36c:	09 f4       	brne	.+2      	; 0x370 <displayDigitOnSegment(int, unsigned char)+0x38>
 36e:	4b c0       	rjmp	.+150    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 370:	4c f4       	brge	.+18     	; 0x384 <displayDigitOnSegment(int, unsigned char)+0x4c>
 372:	c1 30       	cpi	r28, 0x01	; 1
 374:	d1 05       	cpc	r29, r1
 376:	01 f1       	breq	.+64     	; 0x3b8 <displayDigitOnSegment(int, unsigned char)+0x80>
 378:	22 97       	sbiw	r28, 0x02	; 2
 37a:	99 f1       	breq	.+102    	; 0x3e2 <displayDigitOnSegment(int, unsigned char)+0xaa>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:384
    
    default:
        break;
    }

}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	08 95       	ret
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:310
    {
    delay(delayTime); // A bit Delay.
    }
    shiftOut(data, clock, LSBFIRST, digits[num]);
    
    switch (segNum)
 384:	c5 30       	cpi	r28, 0x05	; 5
 386:	d1 05       	cpc	r29, r1
 388:	09 f4       	brne	.+2      	; 0x38c <displayDigitOnSegment(int, unsigned char)+0x54>
 38a:	61 c0       	rjmp	.+194    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 38c:	0c f4       	brge	.+2      	; 0x390 <displayDigitOnSegment(int, unsigned char)+0x58>
 38e:	4d c0       	rjmp	.+154    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 390:	26 97       	sbiw	r28, 0x06	; 6
 392:	a1 f7       	brne	.-24     	; 0x37c <displayDigitOnSegment(int, unsigned char)+0x44>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:369
            digitalWrite(seg5, LOW);
           // delay(1);
            break;
        case 6:

            digitalWrite(seg2, HIGH);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	d9 de       	rcall	.-590    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:370
            digitalWrite(seg3, HIGH);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	d6 de       	rcall	.-596    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:371
            digitalWrite(seg4, HIGH);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	87 e0       	ldi	r24, 0x07	; 7
 3a4:	d3 de       	rcall	.-602    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:372
            digitalWrite(seg5, HIGH);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	d0 de       	rcall	.-608    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:373
            digitalWrite(seg1, HIGH);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	cd de       	rcall	.-614    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:375

            digitalWrite(seg6, LOW);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	89 e0       	ldi	r24, 0x09	; 9
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <displayDigitOnSegment(int, unsigned char)+0xa2>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:314
    
    switch (segNum)
    {
    case 1:
        // we Need To turn Off Other Segs When Displaying number on a segment.
        digitalWrite(seg2, HIGH);
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	85 e0       	ldi	r24, 0x05	; 5
 3bc:	c7 de       	rcall	.-626    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:315
        digitalWrite(seg3, HIGH);
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	c4 de       	rcall	.-632    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:316
        digitalWrite(seg4, HIGH);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	87 e0       	ldi	r24, 0x07	; 7
 3c8:	c1 de       	rcall	.-638    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:317
        digitalWrite(seg5, HIGH);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	be de       	rcall	.-644    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:318
        digitalWrite(seg6, HIGH);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	89 e0       	ldi	r24, 0x09	; 9
 3d4:	bb de       	rcall	.-650    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:320

        digitalWrite(seg1,LOW);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	84 e0       	ldi	r24, 0x04	; 4
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:384
    
    default:
        break;
    }

}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:375
            digitalWrite(seg3, HIGH);
            digitalWrite(seg4, HIGH);
            digitalWrite(seg5, HIGH);
            digitalWrite(seg1, HIGH);

            digitalWrite(seg6, LOW);
 3e0:	b5 ce       	rjmp	.-662    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:324

        digitalWrite(seg1,LOW);
        //delay(1);
        break;
        case 2:
            digitalWrite(seg1, HIGH);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	b2 de       	rcall	.-668    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:325
            digitalWrite(seg3, HIGH);
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	af de       	rcall	.-674    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:326
            digitalWrite(seg4, HIGH);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	87 e0       	ldi	r24, 0x07	; 7
 3f2:	ac de       	rcall	.-680    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:327
            digitalWrite(seg5, HIGH);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	a9 de       	rcall	.-686    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:328
            digitalWrite(seg6, HIGH);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	89 e0       	ldi	r24, 0x09	; 9
 3fe:	a6 de       	rcall	.-692    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:330

            digitalWrite(seg2, LOW);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	85 e0       	ldi	r24, 0x05	; 5
 404:	ea cf       	rjmp	.-44     	; 0x3da <displayDigitOnSegment(int, unsigned char)+0xa2>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:335
           // delay(1);
            break;
        case 3:

            digitalWrite(seg1, HIGH);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	a0 de       	rcall	.-704    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:336
            digitalWrite(seg2, HIGH);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	85 e0       	ldi	r24, 0x05	; 5
 410:	9d de       	rcall	.-710    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:337
            digitalWrite(seg4, HIGH);
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	9a de       	rcall	.-716    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:338
            digitalWrite(seg5, HIGH);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	97 de       	rcall	.-722    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:339
            digitalWrite(seg6, HIGH);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	89 e0       	ldi	r24, 0x09	; 9
 422:	94 de       	rcall	.-728    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:341

            digitalWrite(seg3, LOW);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	d8 cf       	rjmp	.-80     	; 0x3da <displayDigitOnSegment(int, unsigned char)+0xa2>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:346
            //delay(1);

            break;
        case 4:
            digitalWrite(seg2, HIGH);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	85 e0       	ldi	r24, 0x05	; 5
 42e:	8e de       	rcall	.-740    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:347
            digitalWrite(seg3, HIGH);
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	8b de       	rcall	.-746    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:348
            digitalWrite(seg1, HIGH);
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	88 de       	rcall	.-752    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:349
            digitalWrite(seg5, HIGH);
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	85 de       	rcall	.-758    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:350
            digitalWrite(seg6, HIGH);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	89 e0       	ldi	r24, 0x09	; 9
 446:	82 de       	rcall	.-764    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:352

            digitalWrite(seg4, LOW);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	87 e0       	ldi	r24, 0x07	; 7
 44c:	c6 cf       	rjmp	.-116    	; 0x3da <displayDigitOnSegment(int, unsigned char)+0xa2>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:358
            //delay(1);

            break;
        case 5:

            digitalWrite(seg2, HIGH);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	7c de       	rcall	.-776    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:359
            digitalWrite(seg3, HIGH);
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	79 de       	rcall	.-782    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:360
            digitalWrite(seg4, HIGH);
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	76 de       	rcall	.-788    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:361
            digitalWrite(seg1, HIGH);
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	73 de       	rcall	.-794    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:362
            digitalWrite(seg6, HIGH);
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	89 e0       	ldi	r24, 0x09	; 9
 46a:	70 de       	rcall	.-800    	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:364

            digitalWrite(seg5, LOW);
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	88 e0       	ldi	r24, 0x08	; 8
 470:	b4 cf       	rjmp	.-152    	; 0x3da <displayDigitOnSegment(int, unsigned char)+0xa2>

00000472 <String::~String()>:
_ZN6StringD2Ev():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
 472:	fc 01       	movw	r30, r24
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	09 f0       	breq	.+2      	; 0x47e <String::~String()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:125
    free(buffer);
 47c:	45 c4       	rjmp	.+2186   	; 0xd08 <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:126
}
 47e:	08 95       	ret

00000480 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:172
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ec 01       	movw	r28, r24
 48e:	7b 01       	movw	r14, r22
 490:	8a 01       	movw	r16, r20
reserve():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:148
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
 492:	88 81       	ld	r24, Y
 494:	99 81       	ldd	r25, Y+1	; 0x01
 496:	00 97       	sbiw	r24, 0x00	; 0
 498:	29 f0       	breq	.+10     	; 0x4a4 <String::copy(char const*, unsigned int)+0x24>
 49a:	2a 81       	ldd	r18, Y+2	; 0x02
 49c:	3b 81       	ldd	r19, Y+3	; 0x03
 49e:	24 17       	cp	r18, r20
 4a0:	35 07       	cpc	r19, r21
 4a2:	80 f4       	brcc	.+32     	; 0x4c4 <String::copy(char const*, unsigned int)+0x44>
changeBuffer():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:158
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 4a4:	b8 01       	movw	r22, r16
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	b7 d4       	rcall	.+2414   	; 0xe1a <realloc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	89 f0       	breq	.+34     	; 0x4d2 <String::copy(char const*, unsigned int)+0x52>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
 4b0:	99 83       	std	Y+1, r25	; 0x01
 4b2:	88 83       	st	Y, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
 4b4:	1b 83       	std	Y+3, r17	; 0x03
 4b6:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
 4b8:	2c 81       	ldd	r18, Y+4	; 0x04
 4ba:	3d 81       	ldd	r19, Y+5	; 0x05
 4bc:	23 2b       	or	r18, r19
 4be:	11 f4       	brne	.+4      	; 0x4c4 <String::copy(char const*, unsigned int)+0x44>
 4c0:	fc 01       	movw	r30, r24
 4c2:	10 82       	st	Z, r1
_ZN6String4copyEPKcj():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
 4c4:	1d 83       	std	Y+5, r17	; 0x05
 4c6:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
 4c8:	b7 01       	movw	r22, r14
 4ca:	88 81       	ld	r24, Y
 4cc:	99 81       	ldd	r25, Y+1	; 0x01
 4ce:	64 d5       	rcall	.+2760   	; 0xf98 <strcpy>
 4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <String::copy(char const*, unsigned int)+0x68>
invalidate():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
 4d2:	88 81       	ld	r24, Y
 4d4:	99 81       	ldd	r25, Y+1	; 0x01
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	09 f0       	breq	.+2      	; 0x4dc <String::copy(char const*, unsigned int)+0x5c>
 4da:	16 d4       	rcall	.+2092   	; 0xd08 <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
 4dc:	19 82       	std	Y+1, r1	; 0x01
 4de:	18 82       	st	Y, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
 4e0:	1d 82       	std	Y+5, r1	; 0x05
 4e2:	1c 82       	std	Y+4, r1	; 0x04
 4e4:	1b 82       	std	Y+3, r1	; 0x03
 4e6:	1a 82       	std	Y+2, r1	; 0x02
_ZN6String4copyEPKcj():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:180
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
 4e8:	ce 01       	movw	r24, r28
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <__vector_9>:
__vector_9():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
 50e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <timer0_millis>
 512:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <timer0_millis+0x1>
 516:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <timer0_millis+0x2>
 51a:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
 51e:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
 522:	26 e0       	ldi	r18, 0x06	; 6
 524:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
 526:	2d 37       	cpi	r18, 0x7D	; 125
 528:	68 f1       	brcs	.+90     	; 0x584 <__vector_9+0x8c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
 52a:	29 e8       	ldi	r18, 0x89	; 137
 52c:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
 52e:	03 96       	adiw	r24, 0x03	; 3
 530:	a1 1d       	adc	r26, r1
 532:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
 534:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
 538:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <timer0_millis>
 53c:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <timer0_millis+0x1>
 540:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <timer0_millis+0x2>
 544:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
 548:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <timer0_overflow_count>
 54c:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <timer0_overflow_count+0x1>
 550:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <timer0_overflow_count+0x2>
 554:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <timer0_overflow_count+0x3>
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	a1 1d       	adc	r26, r1
 55c:	b1 1d       	adc	r27, r1
 55e:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <timer0_overflow_count>
 562:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <timer0_overflow_count+0x1>
 566:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <timer0_overflow_count+0x2>
 56a:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
 584:	02 96       	adiw	r24, 0x02	; 2
 586:	a1 1d       	adc	r26, r1
 588:	b1 1d       	adc	r27, r1
 58a:	d4 cf       	rjmp	.-88     	; 0x534 <__vector_9+0x3c>

0000058c <__vector_2>:
__vector_2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
 5ae:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5b2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5b6:	09 95       	icall
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	0f 90       	pop	r0
 5d6:	1f 90       	pop	r1
 5d8:	18 95       	reti

000005da <__vector_1>:
__vector_1():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
 5fc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 600:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 604:	09 95       	icall
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <main>:
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	a7 97       	sbiw	r28, 0x27	; 39
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 63c:	78 94       	sei
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	83 60       	ori	r24, 0x03	; 3
 642:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
 644:	89 b7       	in	r24, 0x39	; 57
 646:	81 60       	ori	r24, 0x01	; 1
 648:	89 bf       	out	0x39, r24	; 57
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 64a:	82 e0       	ldi	r24, 0x02	; 2
 64c:	8e bd       	out	0x2e, r24	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 64e:	8e b5       	in	r24, 0x2e	; 46
 650:	81 60       	ori	r24, 0x01	; 1
 652:	8e bd       	out	0x2e, r24	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 654:	8f b5       	in	r24, 0x2f	; 47
 656:	81 60       	ori	r24, 0x01	; 1
 658:	8f bd       	out	0x2f, r24	; 47
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
 65a:	85 b5       	in	r24, 0x25	; 37
 65c:	84 60       	ori	r24, 0x04	; 4
 65e:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
 660:	85 b5       	in	r24, 0x25	; 37
 662:	80 64       	ori	r24, 0x40	; 64
 664:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
 666:	86 e8       	ldi	r24, 0x86	; 134
 668:	86 b9       	out	0x06, r24	; 6
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
 66a:	1a b8       	out	0x0a, r1	; 10
setup():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:93
   // Serial.begin(9600);

    

    //74hc164
    pinMode(data, OUTPUT);
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	8a e0       	ldi	r24, 0x0A	; 10
 670:	9a dd       	rcall	.-1228   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:94
    pinMode(clock, OUTPUT);
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	8b e0       	ldi	r24, 0x0B	; 11
 676:	97 dd       	rcall	.-1234   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:96

    pinMode(seg1,OUTPUT);
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	94 dd       	rcall	.-1240   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:97
    pinMode(seg2, OUTPUT);
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	85 e0       	ldi	r24, 0x05	; 5
 682:	91 dd       	rcall	.-1246   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:98
    pinMode(seg3, OUTPUT);
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	86 e0       	ldi	r24, 0x06	; 6
 688:	8e dd       	rcall	.-1252   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:99
    pinMode(seg4, OUTPUT);
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	87 e0       	ldi	r24, 0x07	; 7
 68e:	8b dd       	rcall	.-1258   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:100
    pinMode(seg5, OUTPUT);
 690:	61 e0       	ldi	r22, 0x01	; 1
 692:	88 e0       	ldi	r24, 0x08	; 8
 694:	88 dd       	rcall	.-1264   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:101
    pinMode(seg6, OUTPUT);
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	89 e0       	ldi	r24, 0x09	; 9
 69a:	85 dd       	rcall	.-1270   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:103

    pinMode(senseIn, INPUT);
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	83 e0       	ldi	r24, 0x03	; 3
 6a0:	82 dd       	rcall	.-1276   	; 0x1a6 <pinMode>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:105

    pinMode(reset,INPUT);
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	7f dd       	rcall	.-1282   	; 0x1a6 <pinMode>
attachInterrupt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
 6a8:	86 e6       	ldi	r24, 0x66	; 102
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 6b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:193
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
          GICR |= (1 << INT0);
          break;
        case 1:
          MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
 6b4:	85 b7       	in	r24, 0x35	; 53
 6b6:	83 7f       	andi	r24, 0xF3	; 243
 6b8:	84 60       	ori	r24, 0x04	; 4
 6ba:	85 bf       	out	0x35, r24	; 53
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:194
          GICR |= (1 << INT1);
 6bc:	8b b7       	in	r24, 0x3b	; 59
 6be:	80 68       	ori	r24, 0x80	; 128
 6c0:	8b bf       	out	0x3b, r24	; 59
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
 6c2:	8c e5       	ldi	r24, 0x5C	; 92
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:189

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
      #elif defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) \
      || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega162__)
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
 6ce:	85 b7       	in	r24, 0x35	; 53
 6d0:	8c 7f       	andi	r24, 0xFC	; 252
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	85 bf       	out	0x35, r24	; 53
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:190
          GICR |= (1 << INT0);
 6d6:	8b b7       	in	r24, 0x3b	; 59
 6d8:	80 64       	ori	r24, 0x40	; 64
 6da:	8b bf       	out	0x3b, r24	; 59
setup():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:113
    attachInterrupt(digitalPinToInterrupt(senseIn), ReadSensor, CHANGE);
    attachInterrupt(digitalPinToInterrupt(reset), ResetCounter, CHANGE);

    // Turn Of All Segments
  // zeroAllSegments();
    digitalWrite(seg3, HIGH);
 6dc:	61 e0       	ldi	r22, 0x01	; 1
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	35 dd       	rcall	.-1430   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:114
    digitalWrite(seg1, HIGH);
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	84 e0       	ldi	r24, 0x04	; 4
 6e6:	32 dd       	rcall	.-1436   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:115
    digitalWrite(seg2, HIGH);
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	85 e0       	ldi	r24, 0x05	; 5
 6ec:	2f dd       	rcall	.-1442   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:116
    digitalWrite(seg4, HIGH);
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	87 e0       	ldi	r24, 0x07	; 7
 6f2:	2c dd       	rcall	.-1448   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:117
    digitalWrite(seg5, HIGH);
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	88 e0       	ldi	r24, 0x08	; 8
 6f8:	29 dd       	rcall	.-1454   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:118
    digitalWrite(seg6, HIGH);
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	89 e0       	ldi	r24, 0x09	; 9
 6fe:	26 dd       	rcall	.-1460   	; 0x14c <digitalWrite>
 700:	04 e6       	ldi	r16, 0x64	; 100
 702:	10 e0       	ldi	r17, 0x00	; 0
DisplaySplash():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:281
            //Serial.print("Displaying: ");
            //Serial.print(j);
            //Serial.print(" , ");
            //Serial.println(8 + j);
            //delay(1);
            displayDigitOnSegment(j, 8 + j);
 704:	6a e0       	ldi	r22, 0x0A	; 10
 706:	82 e0       	ldi	r24, 0x02	; 2
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	16 de       	rcall	.-980    	; 0x338 <displayDigitOnSegment(int, unsigned char)>
 70c:	6b e0       	ldi	r22, 0x0B	; 11
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	12 de       	rcall	.-988    	; 0x338 <displayDigitOnSegment(int, unsigned char)>
 714:	6c e0       	ldi	r22, 0x0C	; 12
 716:	84 e0       	ldi	r24, 0x04	; 4
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e de       	rcall	.-996    	; 0x338 <displayDigitOnSegment(int, unsigned char)>
 71c:	01 50       	subi	r16, 0x01	; 1
 71e:	11 09       	sbc	r17, r1
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:271
    //for(int i = 0; i >= 3; ++i)
   // {
   
   
    //Serial.print("drawing... ");
    for (int i = 0; i < 100; ++i)
 720:	89 f7       	brne	.-30     	; 0x704 <main+0xdc>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:286
            displayDigitOnSegment(j, 8 + j);
            //delay(1);
        }

        }
        shiftOut(data, clock, LSBFIRST, digits[0]);
 722:	8f e3       	ldi	r24, 0x3F	; 63
 724:	f5 dd       	rcall	.-1046   	; 0x310 <shiftOut.constprop.8>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:287
        digitalWrite(seg1, LOW);
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	84 e0       	ldi	r24, 0x04	; 4
 72a:	10 dd       	rcall	.-1504   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:289

        digitalWrite(seg2, HIGH);
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	85 e0       	ldi	r24, 0x05	; 5
 730:	0d dd       	rcall	.-1510   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:290
        digitalWrite(seg3, HIGH);
 732:	61 e0       	ldi	r22, 0x01	; 1
 734:	86 e0       	ldi	r24, 0x06	; 6
 736:	0a dd       	rcall	.-1516   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:291
        digitalWrite(seg4, HIGH);
 738:	61 e0       	ldi	r22, 0x01	; 1
 73a:	87 e0       	ldi	r24, 0x07	; 7
 73c:	07 dd       	rcall	.-1522   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:292
        digitalWrite(seg5, HIGH);
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	88 e0       	ldi	r24, 0x08	; 8
 742:	04 dd       	rcall	.-1528   	; 0x14c <digitalWrite>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:293
        digitalWrite(seg6, HIGH);
 744:	61 e0       	ldi	r22, 0x01	; 1
 746:	89 e0       	ldi	r24, 0x09	; 9
 748:	01 dd       	rcall	.-1534   	; 0x14c <digitalWrite>
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 74a:	8a e0       	ldi	r24, 0x0A	; 10
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	ee d1       	rcall	.+988    	; 0xb2c <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.5():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 750:	89 83       	std	Y+1, r24	; 0x01
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 752:	8b e0       	ldi	r24, 0x0B	; 11
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	ea d1       	rcall	.+980    	; 0xb2c <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.5():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 758:	8a 83       	std	Y+2, r24	; 0x02
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 75a:	8c e0       	ldi	r24, 0x0C	; 12
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	e6 d1       	rcall	.+972    	; 0xb2c <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.5():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 760:	8b 83       	std	Y+3, r24	; 0x03
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 762:	8d e0       	ldi	r24, 0x0D	; 13
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	e2 d1       	rcall	.+964    	; 0xb2c <eeprom_read_byte>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.5():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 768:	8c 83       	std	Y+4, r24	; 0x04
setup():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:125
    DisplaySplash();

    //Read Saved Count From EEPROM
    long i;
    EEPROM.get(eep_addr, i);
    delay(1);
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	70 dd       	rcall	.-1312   	; 0x254 <delay>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:126
    if (i > 0)
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	9a 81       	ldd	r25, Y+2	; 0x02
 778:	ab 81       	ldd	r26, Y+3	; 0x03
 77a:	bc 81       	ldd	r27, Y+4	; 0x04
 77c:	18 16       	cp	r1, r24
 77e:	19 06       	cpc	r1, r25
 780:	1a 06       	cpc	r1, r26
 782:	1b 06       	cpc	r1, r27
 784:	44 f4       	brge	.+16     	; 0x796 <main+0x16e>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:127
        count = i;
 786:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <count>
 78a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <count+0x1>
 78e:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <count+0x2>
 792:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <count+0x3>
ultoa():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:569
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 796:	8e 01       	movw	r16, r28
 798:	0f 5f       	subi	r16, 0xFF	; 255
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
adjustDelayTime():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:172
void adjustDelayTime()
{
    if (count > 99)
    {
        bisMicroDelay = false;
        delayTime = 7; // 13 ms for single digit
 79c:	37 e0       	ldi	r19, 0x07	; 7
 79e:	43 2e       	mov	r4, r19
 7a0:	51 2c       	mov	r5, r1
 7a2:	61 2c       	mov	r6, r1
 7a4:	71 2c       	mov	r7, r1
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:169
    ManuallyResetCounter();
}
// Adjust delay time based on count value
void adjustDelayTime()
{
    if (count > 99)
 7a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <count>
 7aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <count+0x1>
 7ae:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <count+0x2>
 7b2:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <count+0x3>
 7b6:	84 36       	cpi	r24, 0x64	; 100
 7b8:	91 05       	cpc	r25, r1
 7ba:	a1 05       	cpc	r26, r1
 7bc:	b1 05       	cpc	r27, r1
 7be:	08 f4       	brcc	.+2      	; 0x7c2 <main+0x19a>
 7c0:	af c0       	rjmp	.+350    	; 0x920 <main+0x2f8>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:171
    {
        bisMicroDelay = false;
 7c2:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <bisMicroDelay>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:172
        delayTime = 7; // 13 ms for single digit
 7c6:	40 92 64 00 	sts	0x0064, r4	; 0x800064 <delayTime>
 7ca:	50 92 65 00 	sts	0x0065, r5	; 0x800065 <delayTime+0x1>
 7ce:	60 92 66 00 	sts	0x0066, r6	; 0x800066 <delayTime+0x2>
 7d2:	70 92 67 00 	sts	0x0067, r7	; 0x800067 <delayTime+0x3>
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:246
}

/// @brief Display Numbers On 7-Segments.
void displayNumber()
{
strnum = String(count);
 7d6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <count>
 7da:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <count+0x1>
 7de:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <count+0x2>
 7e2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <count+0x3>
_ZN6String4initEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
 7e6:	1b a2       	std	Y+35, r1	; 0x23
 7e8:	1a a2       	std	Y+34, r1	; 0x22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
 7ea:	1d a2       	std	Y+37, r1	; 0x25
 7ec:	1c a2       	std	Y+36, r1	; 0x24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
 7ee:	1f a2       	std	Y+39, r1	; 0x27
 7f0:	1e a2       	std	Y+38, r1	; 0x26
ultoa():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:569
 7f2:	2a e0       	ldi	r18, 0x0A	; 10
 7f4:	a8 01       	movw	r20, r16
 7f6:	69 d1       	rcall	.+722    	; 0xaca <__ultoa_ncheck>
operator=():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
 7f8:	f8 01       	movw	r30, r16
 7fa:	01 90       	ld	r0, Z+
 7fc:	00 20       	and	r0, r0
 7fe:	e9 f7       	brne	.-6      	; 0x7fa <main+0x1d2>
 800:	31 97       	sbiw	r30, 0x01	; 1
 802:	af 01       	movw	r20, r30
 804:	40 1b       	sub	r20, r16
 806:	51 0b       	sbc	r21, r17
 808:	b8 01       	movw	r22, r16
 80a:	ce 01       	movw	r24, r28
 80c:	82 96       	adiw	r24, 0x22	; 34
 80e:	38 de       	rcall	.-912    	; 0x480 <String::copy(char const*, unsigned int)>
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:196
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
  if (buffer) {
 810:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <strnum>
 814:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <strnum+0x1>
 818:	00 97       	sbiw	r24, 0x00	; 0
 81a:	09 f4       	brne	.+2      	; 0x81e <main+0x1f6>
 81c:	bc c0       	rjmp	.+376    	; 0x996 <main+0x36e>
 81e:	6a a1       	ldd	r22, Y+34	; 0x22
 820:	7b a1       	ldd	r23, Y+35	; 0x23
_ZNK6StringcvMS_KFvvEEv.isra.0():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	09 f4       	brne	.+2      	; 0x82a <main+0x202>
 828:	b5 c0       	rjmp	.+362    	; 0x994 <main+0x36c>
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
 82a:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <strnum+0x2>
 82e:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <strnum+0x3>
 832:	2e a1       	ldd	r18, Y+38	; 0x26
 834:	3f a1       	ldd	r19, Y+39	; 0x27
 836:	42 17       	cp	r20, r18
 838:	53 07       	cpc	r21, r19
 83a:	08 f4       	brcc	.+2      	; 0x83e <main+0x216>
 83c:	ab c0       	rjmp	.+342    	; 0x994 <main+0x36c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
 83e:	ac d3       	rcall	.+1880   	; 0xf98 <strcpy>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
 840:	8e a1       	ldd	r24, Y+38	; 0x26
 842:	9f a1       	ldd	r25, Y+39	; 0x27
 844:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <strnum+0x5>
 848:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <strnum+0x4>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
 84c:	1f a2       	std	Y+39, r1	; 0x27
 84e:	1e a2       	std	Y+38, r1	; 0x26
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:246
 850:	ce 01       	movw	r24, r28
 852:	82 96       	adiw	r24, 0x22	; 34
 854:	0e de       	rcall	.-996    	; 0x472 <String::~String()>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:247
int numLengh = strnum.length() - 1;
 856:	20 90 82 00 	lds	r2, 0x0082	; 0x800082 <strnum+0x4>
 85a:	30 90 83 00 	lds	r3, 0x0083	; 0x800083 <strnum+0x5>
 85e:	91 e0       	ldi	r25, 0x01	; 1
 860:	29 1a       	sub	r2, r25
 862:	31 08       	sbc	r3, r1
main():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:252
/* Serial.print("strnum: ");
Serial.println(strnum);
Serial.print("numLengh: ");
Serial.println(numLengh); */
for(int i = 0; i <= numLengh; ++i)
 864:	f1 2c       	mov	r15, r1
 866:	e1 2c       	mov	r14, r1
displayNumber():
 868:	2e 14       	cp	r2, r14
 86a:	3f 04       	cpc	r3, r15
 86c:	0c f4       	brge	.+2      	; 0x870 <main+0x248>
 86e:	b6 c0       	rjmp	.+364    	; 0x9dc <main+0x3b4>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:254
{
    uint8_t number = strnum.substring(i,i + 1).toInt();
 870:	af ef       	ldi	r26, 0xFF	; 255
 872:	ea 1a       	sub	r14, r26
 874:	fa 0a       	sbc	r15, r26
 876:	47 01       	movw	r8, r14
 878:	57 01       	movw	r10, r14
 87a:	b1 e0       	ldi	r27, 0x01	; 1
 87c:	ab 1a       	sub	r10, r27
 87e:	b1 08       	sbc	r11, r1
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:617
  return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
  if (left > right) {
 880:	ea 14       	cp	r14, r10
 882:	fb 04       	cpc	r15, r11
 884:	28 f4       	brcc	.+10     	; 0x890 <main+0x268>
 886:	88 24       	eor	r8, r8
 888:	8a 94       	dec	r8
 88a:	98 2c       	mov	r9, r8
 88c:	b1 2c       	mov	r11, r1
 88e:	a1 2c       	mov	r10, r1
_ZN6String4initEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
 890:	1a 82       	std	Y+2, r1	; 0x02
 892:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
 894:	1c 82       	std	Y+4, r1	; 0x04
 896:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
 898:	1e 82       	std	Y+6, r1	; 0x06
 89a:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	40 e0       	ldi	r20, 0x00	; 0
 8a0:	6b e7       	ldi	r22, 0x7B	; 123
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	c8 01       	movw	r24, r16
 8a6:	ec dd       	rcall	.-1064   	; 0x480 <String::copy(char const*, unsigned int)>
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:623
    unsigned int temp = right;
    right = left;
    left = temp;
  }
  String out;
  if (left >= len) return out;
 8a8:	c0 90 82 00 	lds	r12, 0x0082	; 0x800082 <strnum+0x4>
 8ac:	d0 90 83 00 	lds	r13, 0x0083	; 0x800083 <strnum+0x5>
 8b0:	ac 14       	cp	r10, r12
 8b2:	bd 04       	cpc	r11, r13
 8b4:	40 f5       	brcc	.+80     	; 0x906 <main+0x2de>
 8b6:	8c 14       	cp	r8, r12
 8b8:	9d 04       	cpc	r9, r13
 8ba:	08 f4       	brcc	.+2      	; 0x8be <main+0x296>
 8bc:	64 01       	movw	r12, r8
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:625
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
 8be:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <strnum>
 8c2:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <strnum+0x1>
 8c6:	ec 0d       	add	r30, r12
 8c8:	fd 1d       	adc	r31, r13
 8ca:	90 80       	ld	r9, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:626
  buffer[right] = '\0'; 
 8cc:	10 82       	st	Z, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:627
  out = buffer + left;  // pointer arithmetic
 8ce:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <strnum>
 8d2:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <strnum+0x1>
 8d6:	6a 0d       	add	r22, r10
 8d8:	7b 1d       	adc	r23, r11
operator=():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
 8da:	61 15       	cp	r22, r1
 8dc:	71 05       	cpc	r23, r1
 8de:	09 f4       	brne	.+2      	; 0x8e2 <main+0x2ba>
 8e0:	71 c0       	rjmp	.+226    	; 0x9c4 <main+0x39c>
 8e2:	fb 01       	movw	r30, r22
 8e4:	01 90       	ld	r0, Z+
 8e6:	00 20       	and	r0, r0
 8e8:	e9 f7       	brne	.-6      	; 0x8e4 <main+0x2bc>
 8ea:	31 97       	sbiw	r30, 0x01	; 1
 8ec:	af 01       	movw	r20, r30
 8ee:	46 1b       	sub	r20, r22
 8f0:	57 0b       	sbc	r21, r23
 8f2:	c8 01       	movw	r24, r16
 8f4:	c5 dd       	rcall	.-1142   	; 0x480 <String::copy(char const*, unsigned int)>
substring():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:628
  if (left >= len) return out;
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
  buffer[right] = '\0'; 
  out = buffer + left;  // pointer arithmetic
  buffer[right] = temp;  //restore character
 8f6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <strnum>
 8fa:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <strnum+0x1>
 8fe:	c8 0e       	add	r12, r24
 900:	d9 1e       	adc	r13, r25
 902:	f6 01       	movw	r30, r12
 904:	90 82       	st	Z, r9
toInt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
 906:	89 81       	ldd	r24, Y+1	; 0x01
 908:	9a 81       	ldd	r25, Y+2	; 0x02
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:739
  return 0;
 90a:	d1 2c       	mov	r13, r1
toInt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	11 f0       	breq	.+4      	; 0x914 <main+0x2ec>
 910:	a1 d0       	rcall	.+322    	; 0xa54 <atol>
 912:	d6 2e       	mov	r13, r22
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:254
 914:	c8 01       	movw	r24, r16
 916:	ad dd       	rcall	.-1190   	; 0x472 <String::~String()>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:259
    /* Serial.print("Displaying: ");
    Serial.println(number);
    Serial.print("On Segment: ");
    Serial.println(i); */
    displayDigitOnSegment( i+1,  number);
 918:	6d 2d       	mov	r22, r13
 91a:	c7 01       	movw	r24, r14
 91c:	0d dd       	rcall	.-1510   	; 0x338 <displayDigitOnSegment(int, unsigned char)>
 91e:	a4 cf       	rjmp	.-184    	; 0x868 <main+0x240>
adjustDelayTime():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:174
    if (count > 99)
    {
        bisMicroDelay = false;
        delayTime = 7; // 13 ms for single digit
    }
    else if (count > 999)
 920:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <count>
 924:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <count+0x1>
 928:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <count+0x2>
 92c:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <count+0x3>
 930:	88 3e       	cpi	r24, 0xE8	; 232
 932:	93 40       	sbci	r25, 0x03	; 3
 934:	a1 05       	cpc	r26, r1
 936:	b1 05       	cpc	r27, r1
 938:	20 f0       	brcs	.+8      	; 0x942 <main+0x31a>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:176
    {
        bisMicroDelay = true;
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <bisMicroDelay>
 940:	4a cf       	rjmp	.-364    	; 0x7d6 <main+0x1ae>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:179
        //delayTime = 10; // 20 ms for double digits
    }
    else if (count > 9999)
 942:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <count>
 946:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <count+0x1>
 94a:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <count+0x2>
 94e:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <count+0x3>
 952:	80 31       	cpi	r24, 0x10	; 16
 954:	97 42       	sbci	r25, 0x27	; 39
 956:	a1 05       	cpc	r26, r1
 958:	b1 05       	cpc	r27, r1
 95a:	78 f7       	brcc	.-34     	; 0x93a <main+0x312>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:184
    {
        bisMicroDelay = true; // for micro delay, to prevent flickering on display.
       // delayTime = 1; // 30 ms for triple digits
    }
    else if (count < 10)
 95c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <count>
 960:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <count+0x1>
 964:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <count+0x2>
 968:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <count+0x3>
 96c:	0a 97       	sbiw	r24, 0x0a	; 10
 96e:	a1 05       	cpc	r26, r1
 970:	b1 05       	cpc	r27, r1
 972:	08 f0       	brcs	.+2      	; 0x976 <main+0x34e>
 974:	30 cf       	rjmp	.-416    	; 0x7d6 <main+0x1ae>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:186
    {
        bisMicroDelay = false;
 976:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <bisMicroDelay>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:187
        delayTime = 11; // 50 ms for four digits or more
 97a:	8b e0       	ldi	r24, 0x0B	; 11
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	a0 e0       	ldi	r26, 0x00	; 0
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delayTime>
 986:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delayTime+0x1>
 98a:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delayTime+0x2>
 98e:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delayTime+0x3>
 992:	21 cf       	rjmp	.-446    	; 0x7d6 <main+0x1ae>
move():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
 994:	b9 d1       	rcall	.+882    	; 0xd08 <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
 996:	8a a1       	ldd	r24, Y+34	; 0x22
 998:	9b a1       	ldd	r25, Y+35	; 0x23
 99a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <strnum+0x1>
 99e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <strnum>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
 9a2:	8c a1       	ldd	r24, Y+36	; 0x24
 9a4:	9d a1       	ldd	r25, Y+37	; 0x25
 9a6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <strnum+0x3>
 9aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <strnum+0x2>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
 9ae:	8e a1       	ldd	r24, Y+38	; 0x26
 9b0:	9f a1       	ldd	r25, Y+39	; 0x27
 9b2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <strnum+0x5>
 9b6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <strnum+0x4>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
 9ba:	1b a2       	std	Y+35, r1	; 0x23
 9bc:	1a a2       	std	Y+34, r1	; 0x22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
 9be:	1d a2       	std	Y+37, r1	; 0x25
 9c0:	1c a2       	std	Y+36, r1	; 0x24
 9c2:	44 cf       	rjmp	.-376    	; 0x84c <main+0x224>
invalidate():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	9a 81       	ldd	r25, Y+2	; 0x02
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	09 f0       	breq	.+2      	; 0x9ce <main+0x3a6>
 9cc:	9d d1       	rcall	.+826    	; 0xd08 <free>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
 9ce:	1a 82       	std	Y+2, r1	; 0x02
 9d0:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
 9d2:	1e 82       	std	Y+6, r1	; 0x06
 9d4:	1d 82       	std	Y+5, r1	; 0x05
 9d6:	1c 82       	std	Y+4, r1	; 0x04
 9d8:	1b 82       	std	Y+3, r1	; 0x03
 9da:	8d cf       	rjmp	.-230    	; 0x8f6 <main+0x2ce>
 9dc:	84 e8       	ldi	r24, 0x84	; 132
 9de:	e8 2e       	mov	r14, r24
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	f8 2e       	mov	r15, r24
displayNumber():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:252
int numLengh = strnum.length() - 1;
/* Serial.print("strnum: ");
Serial.println(strnum);
Serial.print("numLengh: ");
Serial.println(numLengh); */
for(int i = 0; i <= numLengh; ++i)
 9e4:	9a e0       	ldi	r25, 0x0A	; 10
 9e6:	c9 2e       	mov	r12, r25
 9e8:	d1 2c       	mov	r13, r1
_ZN11EEPROMClass3putIVmEERKT_iS4_.isra.6():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:140
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
 9ea:	d7 01       	movw	r26, r14
 9ec:	bd 90       	ld	r11, X+
 9ee:	7d 01       	movw	r14, r26
operator*():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 9f0:	c6 01       	movw	r24, r12
 9f2:	9c d0       	rcall	.+312    	; 0xb2c <eeprom_read_byte>
update():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
 9f4:	b8 16       	cp	r11, r24
 9f6:	19 f0       	breq	.+6      	; 0x9fe <main+0x3d6>
_ZN5EERefaSEh():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
 9f8:	6b 2d       	mov	r22, r11
 9fa:	c6 01       	movw	r24, r12
 9fc:	9f d0       	rcall	.+318    	; 0xb3c <eeprom_write_byte>
 9fe:	bf ef       	ldi	r27, 0xFF	; 255
 a00:	cb 1a       	sub	r12, r27
 a02:	db 0a       	sbc	r13, r27
_ZN11EEPROMClass3putIVmEERKT_iS4_.isra.6():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\EEPROM\src/EEPROM.h:140
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
 a04:	ee e0       	ldi	r30, 0x0E	; 14
 a06:	ce 16       	cp	r12, r30
 a08:	d1 04       	cpc	r13, r1
 a0a:	79 f7       	brne	.-34     	; 0x9ea <main+0x3c2>
ManuallyResetCounter():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:232
void ManuallyResetCounter()
{
    //  Serial.println("reset eep... ");
    // if (!bisFreshStart)
    //{
    if((digitalRead(reset)) == HIGH)
 a0c:	82 e0       	ldi	r24, 0x02	; 2
 a0e:	76 db       	rcall	.-2324   	; 0xfc <digitalRead>
 a10:	01 97       	sbiw	r24, 0x01	; 1
 a12:	41 f4       	brne	.+16     	; 0xa24 <main+0x3fc>
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:239
        
    for (unsigned int i = eep_addr; i < sizeof(unsigned long); ++i)
    {
        EEPROM.write(i, 0);
    }
    count = 0;
 a14:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count>
 a18:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count+0x1>
 a1c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <count+0x2>
 a20:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <count+0x3>
main():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	89 2b       	or	r24, r25
 a2a:	09 f4       	brne	.+2      	; 0xa2e <main+0x406>
 a2c:	bc ce       	rjmp	.-648    	; 0x7a6 <main+0x17e>
 a2e:	e8 da       	rcall	.-2608   	; 0x0 <__vectors>
 a30:	ba ce       	rjmp	.-652    	; 0x7a6 <main+0x17e>

00000a32 <_GLOBAL__sub_I_count>:
_ZN6String4initEv():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
 a32:	ee e7       	ldi	r30, 0x7E	; 126
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	11 82       	std	Z+1, r1	; 0x01
 a38:	10 82       	st	Z, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
 a3a:	13 82       	std	Z+3, r1	; 0x03
 a3c:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
 a3e:	15 82       	std	Z+5, r1	; 0x05
 a40:	14 82       	std	Z+4, r1	; 0x04
_GLOBAL__sub_I_count():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	40 e0       	ldi	r20, 0x00	; 0
 a46:	6b e7       	ldi	r22, 0x7B	; 123
 a48:	70 e0       	ldi	r23, 0x00	; 0
 a4a:	cf 01       	movw	r24, r30
 a4c:	19 cd       	rjmp	.-1486   	; 0x480 <String::copy(char const*, unsigned int)>

00000a4e <_GLOBAL__sub_D_count>:
_GLOBAL__sub_D_count():
H:\Arduino\projects\DigitalCounter/DigitalCounter.ino:57
//long prevCount = 0;

unsigned long delayTime = 7; // delay time for display
bool bisMicroDelay = false; // for micro delay, to prevent flickering on display.

String strnum;
 a4e:	8e e7       	ldi	r24, 0x7E	; 126
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0f cd       	rjmp	.-1506   	; 0x472 <String::~String()>

00000a54 <atol>:
atol():
 a54:	1f 93       	push	r17
 a56:	fc 01       	movw	r30, r24
 a58:	99 27       	eor	r25, r25
 a5a:	88 27       	eor	r24, r24
 a5c:	bc 01       	movw	r22, r24
 a5e:	e8 94       	clt
 a60:	11 91       	ld	r17, Z+
 a62:	10 32       	cpi	r17, 0x20	; 32
 a64:	e9 f3       	breq	.-6      	; 0xa60 <atol+0xc>
 a66:	19 30       	cpi	r17, 0x09	; 9
 a68:	10 f0       	brcs	.+4      	; 0xa6e <atol+0x1a>
 a6a:	1e 30       	cpi	r17, 0x0E	; 14
 a6c:	c8 f3       	brcs	.-14     	; 0xa60 <atol+0xc>
 a6e:	1b 32       	cpi	r17, 0x2B	; 43
 a70:	49 f0       	breq	.+18     	; 0xa84 <atol+0x30>
 a72:	1d 32       	cpi	r17, 0x2D	; 45
 a74:	41 f4       	brne	.+16     	; 0xa86 <atol+0x32>
 a76:	68 94       	set
 a78:	05 c0       	rjmp	.+10     	; 0xa84 <atol+0x30>
 a7a:	12 d0       	rcall	.+36     	; 0xaa0 <__mulsi_const_10>
 a7c:	61 0f       	add	r22, r17
 a7e:	71 1d       	adc	r23, r1
 a80:	81 1d       	adc	r24, r1
 a82:	91 1d       	adc	r25, r1
 a84:	11 91       	ld	r17, Z+
 a86:	10 53       	subi	r17, 0x30	; 48
 a88:	1a 30       	cpi	r17, 0x0A	; 10
 a8a:	b8 f3       	brcs	.-18     	; 0xa7a <atol+0x26>
 a8c:	3e f4       	brtc	.+14     	; 0xa9c <atol+0x48>
 a8e:	90 95       	com	r25
 a90:	80 95       	com	r24
 a92:	70 95       	com	r23
 a94:	61 95       	neg	r22
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	8f 4f       	sbci	r24, 0xFF	; 255
 a9a:	9f 4f       	sbci	r25, 0xFF	; 255
 a9c:	1f 91       	pop	r17
 a9e:	08 95       	ret

00000aa0 <__mulsi_const_10>:
__mulsi_const_10():
 aa0:	59 2f       	mov	r21, r25
 aa2:	48 2f       	mov	r20, r24
 aa4:	37 2f       	mov	r19, r23
 aa6:	26 2f       	mov	r18, r22
 aa8:	66 0f       	add	r22, r22
 aaa:	77 1f       	adc	r23, r23
 aac:	88 1f       	adc	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	66 0f       	add	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	62 0f       	add	r22, r18
 aba:	73 1f       	adc	r23, r19
 abc:	84 1f       	adc	r24, r20
 abe:	95 1f       	adc	r25, r21
 ac0:	66 0f       	add	r22, r22
 ac2:	77 1f       	adc	r23, r23
 ac4:	88 1f       	adc	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	08 95       	ret

00000aca <__ultoa_ncheck>:
__ultoa_ncheck():
 aca:	bb 27       	eor	r27, r27

00000acc <__ultoa_common>:
 acc:	fa 01       	movw	r30, r20
 ace:	a6 2f       	mov	r26, r22
 ad0:	62 17       	cp	r22, r18
 ad2:	71 05       	cpc	r23, r1
 ad4:	81 05       	cpc	r24, r1
 ad6:	91 05       	cpc	r25, r1
 ad8:	33 0b       	sbc	r19, r19
 ada:	30 fb       	bst	r19, 0
 adc:	66 f0       	brts	.+24     	; 0xaf6 <__ultoa_common+0x2a>
 ade:	aa 27       	eor	r26, r26
 ae0:	66 0f       	add	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	aa 1f       	adc	r26, r26
 aea:	a2 17       	cp	r26, r18
 aec:	10 f0       	brcs	.+4      	; 0xaf2 <__ultoa_common+0x26>
 aee:	a2 1b       	sub	r26, r18
 af0:	63 95       	inc	r22
 af2:	38 50       	subi	r19, 0x08	; 8
 af4:	a9 f7       	brne	.-22     	; 0xae0 <__ultoa_common+0x14>
 af6:	a0 5d       	subi	r26, 0xD0	; 208
 af8:	aa 33       	cpi	r26, 0x3A	; 58
 afa:	08 f0       	brcs	.+2      	; 0xafe <__ultoa_common+0x32>
 afc:	a9 5d       	subi	r26, 0xD9	; 217
 afe:	a1 93       	st	Z+, r26
 b00:	36 f7       	brtc	.-52     	; 0xace <__ultoa_common+0x2>
 b02:	b1 11       	cpse	r27, r1
 b04:	b1 93       	st	Z+, r27
 b06:	10 82       	st	Z, r1
 b08:	ca 01       	movw	r24, r20
 b0a:	00 c0       	rjmp	.+0      	; 0xb0c <strrev>

00000b0c <strrev>:
strrev():
 b0c:	dc 01       	movw	r26, r24
 b0e:	fc 01       	movw	r30, r24
 b10:	67 2f       	mov	r22, r23
 b12:	71 91       	ld	r23, Z+
 b14:	77 23       	and	r23, r23
 b16:	e1 f7       	brne	.-8      	; 0xb10 <strrev+0x4>
 b18:	32 97       	sbiw	r30, 0x02	; 2
 b1a:	04 c0       	rjmp	.+8      	; 0xb24 <strrev+0x18>
 b1c:	7c 91       	ld	r23, X
 b1e:	6d 93       	st	X+, r22
 b20:	70 83       	st	Z, r23
 b22:	62 91       	ld	r22, -Z
 b24:	ae 17       	cp	r26, r30
 b26:	bf 07       	cpc	r27, r31
 b28:	c8 f3       	brcs	.-14     	; 0xb1c <strrev+0x10>
 b2a:	08 95       	ret

00000b2c <eeprom_read_byte>:
eeprom_read_byte():
 b2c:	e1 99       	sbic	0x1c, 1	; 28
 b2e:	fe cf       	rjmp	.-4      	; 0xb2c <eeprom_read_byte>
 b30:	9f bb       	out	0x1f, r25	; 31
 b32:	8e bb       	out	0x1e, r24	; 30
 b34:	e0 9a       	sbi	0x1c, 0	; 28
 b36:	99 27       	eor	r25, r25
 b38:	8d b3       	in	r24, 0x1d	; 29
 b3a:	08 95       	ret

00000b3c <eeprom_write_byte>:
eeprom_write_byte():
 b3c:	26 2f       	mov	r18, r22

00000b3e <eeprom_write_r18>:
 b3e:	e1 99       	sbic	0x1c, 1	; 28
 b40:	fe cf       	rjmp	.-4      	; 0xb3e <eeprom_write_r18>
 b42:	9f bb       	out	0x1f, r25	; 31
 b44:	8e bb       	out	0x1e, r24	; 30
 b46:	2d bb       	out	0x1d, r18	; 29
 b48:	0f b6       	in	r0, 0x3f	; 63
 b4a:	f8 94       	cli
 b4c:	e2 9a       	sbi	0x1c, 2	; 28
 b4e:	e1 9a       	sbi	0x1c, 1	; 28
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	01 96       	adiw	r24, 0x01	; 1
 b54:	08 95       	ret

00000b56 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
 b56:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
 b58:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
 b5a:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
 b5c:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
 b5e:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
 b60:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
 b62:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
 b64:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
 b66:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
 b68:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
 b6a:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
 b6c:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
 b6e:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
 b70:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
 b72:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
 b74:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
 b76:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
 b78:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
 b7a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
 b7c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
 b7e:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
 b80:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
 b82:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
 b84:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
 b86:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
 b88:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
 b8a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
 b8c:	09 94       	ijmp

00000b8e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
 b8e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
 b90:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
 b92:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
 b94:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
 b96:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
 b98:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
 b9a:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
 b9c:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
 b9e:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
 ba0:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
 ba2:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
 ba4:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
 ba6:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
 ba8:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
 baa:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
 bac:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
 bae:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
 bb0:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
 bb2:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
 bb4:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
 bb6:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
 bb8:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
 bba:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
 bbc:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
 bbe:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
 bc0:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
 bc2:	08 95       	ret

00000bc4 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 bc4:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 bc6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 bc8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 bca:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 bcc:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 bce:	09 94       	ijmp

00000bd0 <malloc>:
malloc():
 bd0:	0f 93       	push	r16
 bd2:	1f 93       	push	r17
 bd4:	cf 93       	push	r28
 bd6:	df 93       	push	r29
 bd8:	82 30       	cpi	r24, 0x02	; 2
 bda:	91 05       	cpc	r25, r1
 bdc:	10 f4       	brcc	.+4      	; 0xbe2 <malloc+0x12>
 bde:	82 e0       	ldi	r24, 0x02	; 2
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <__flp>
 be6:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <__flp+0x1>
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	20 e0       	ldi	r18, 0x00	; 0
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	a0 e0       	ldi	r26, 0x00	; 0
 bf2:	30 97       	sbiw	r30, 0x00	; 0
 bf4:	99 f4       	brne	.+38     	; 0xc1c <malloc+0x4c>
 bf6:	21 15       	cp	r18, r1
 bf8:	31 05       	cpc	r19, r1
 bfa:	09 f4       	brne	.+2      	; 0xbfe <malloc+0x2e>
 bfc:	4a c0       	rjmp	.+148    	; 0xc92 <malloc+0xc2>
 bfe:	28 1b       	sub	r18, r24
 c00:	39 0b       	sbc	r19, r25
 c02:	24 30       	cpi	r18, 0x04	; 4
 c04:	31 05       	cpc	r19, r1
 c06:	d8 f5       	brcc	.+118    	; 0xc7e <malloc+0xae>
 c08:	8a 81       	ldd	r24, Y+2	; 0x02
 c0a:	9b 81       	ldd	r25, Y+3	; 0x03
 c0c:	61 15       	cp	r22, r1
 c0e:	71 05       	cpc	r23, r1
 c10:	89 f1       	breq	.+98     	; 0xc74 <malloc+0xa4>
 c12:	fb 01       	movw	r30, r22
 c14:	93 83       	std	Z+3, r25	; 0x03
 c16:	82 83       	std	Z+2, r24	; 0x02
 c18:	fe 01       	movw	r30, r28
 c1a:	11 c0       	rjmp	.+34     	; 0xc3e <malloc+0x6e>
 c1c:	40 81       	ld	r20, Z
 c1e:	51 81       	ldd	r21, Z+1	; 0x01
 c20:	02 81       	ldd	r16, Z+2	; 0x02
 c22:	13 81       	ldd	r17, Z+3	; 0x03
 c24:	48 17       	cp	r20, r24
 c26:	59 07       	cpc	r21, r25
 c28:	e0 f0       	brcs	.+56     	; 0xc62 <malloc+0x92>
 c2a:	48 17       	cp	r20, r24
 c2c:	59 07       	cpc	r21, r25
 c2e:	99 f4       	brne	.+38     	; 0xc56 <malloc+0x86>
 c30:	10 97       	sbiw	r26, 0x00	; 0
 c32:	61 f0       	breq	.+24     	; 0xc4c <malloc+0x7c>
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	0c 93       	st	X, r16
 c38:	12 97       	sbiw	r26, 0x02	; 2
 c3a:	13 96       	adiw	r26, 0x03	; 3
 c3c:	1c 93       	st	X, r17
 c3e:	32 96       	adiw	r30, 0x02	; 2
 c40:	cf 01       	movw	r24, r30
 c42:	df 91       	pop	r29
 c44:	cf 91       	pop	r28
 c46:	1f 91       	pop	r17
 c48:	0f 91       	pop	r16
 c4a:	08 95       	ret
 c4c:	00 93 93 00 	sts	0x0093, r16	; 0x800093 <__flp>
 c50:	10 93 94 00 	sts	0x0094, r17	; 0x800094 <__flp+0x1>
 c54:	f4 cf       	rjmp	.-24     	; 0xc3e <malloc+0x6e>
 c56:	21 15       	cp	r18, r1
 c58:	31 05       	cpc	r19, r1
 c5a:	51 f0       	breq	.+20     	; 0xc70 <malloc+0xa0>
 c5c:	42 17       	cp	r20, r18
 c5e:	53 07       	cpc	r21, r19
 c60:	38 f0       	brcs	.+14     	; 0xc70 <malloc+0xa0>
 c62:	a9 01       	movw	r20, r18
 c64:	db 01       	movw	r26, r22
 c66:	9a 01       	movw	r18, r20
 c68:	bd 01       	movw	r22, r26
 c6a:	df 01       	movw	r26, r30
 c6c:	f8 01       	movw	r30, r16
 c6e:	c1 cf       	rjmp	.-126    	; 0xbf2 <malloc+0x22>
 c70:	ef 01       	movw	r28, r30
 c72:	f9 cf       	rjmp	.-14     	; 0xc66 <malloc+0x96>
 c74:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__flp+0x1>
 c78:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <__flp>
 c7c:	cd cf       	rjmp	.-102    	; 0xc18 <malloc+0x48>
 c7e:	fe 01       	movw	r30, r28
 c80:	e2 0f       	add	r30, r18
 c82:	f3 1f       	adc	r31, r19
 c84:	81 93       	st	Z+, r24
 c86:	91 93       	st	Z+, r25
 c88:	22 50       	subi	r18, 0x02	; 2
 c8a:	31 09       	sbc	r19, r1
 c8c:	39 83       	std	Y+1, r19	; 0x01
 c8e:	28 83       	st	Y, r18
 c90:	d7 cf       	rjmp	.-82     	; 0xc40 <malloc+0x70>
 c92:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <__brkval>
 c96:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <__brkval+0x1>
 c9a:	23 2b       	or	r18, r19
 c9c:	41 f4       	brne	.+16     	; 0xcae <malloc+0xde>
 c9e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__malloc_heap_start>
 ca2:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__malloc_heap_start+0x1>
 ca6:	30 93 92 00 	sts	0x0092, r19	; 0x800092 <__brkval+0x1>
 caa:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__brkval>
 cae:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__malloc_heap_end>
 cb2:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__malloc_heap_end+0x1>
 cb6:	21 15       	cp	r18, r1
 cb8:	31 05       	cpc	r19, r1
 cba:	41 f4       	brne	.+16     	; 0xccc <malloc+0xfc>
 cbc:	2d b7       	in	r18, 0x3d	; 61
 cbe:	3e b7       	in	r19, 0x3e	; 62
 cc0:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <__malloc_margin>
 cc4:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <__malloc_margin+0x1>
 cc8:	24 1b       	sub	r18, r20
 cca:	35 0b       	sbc	r19, r21
 ccc:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <__brkval>
 cd0:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <__brkval+0x1>
 cd4:	e2 17       	cp	r30, r18
 cd6:	f3 07       	cpc	r31, r19
 cd8:	a0 f4       	brcc	.+40     	; 0xd02 <malloc+0x132>
 cda:	2e 1b       	sub	r18, r30
 cdc:	3f 0b       	sbc	r19, r31
 cde:	28 17       	cp	r18, r24
 ce0:	39 07       	cpc	r19, r25
 ce2:	78 f0       	brcs	.+30     	; 0xd02 <malloc+0x132>
 ce4:	ac 01       	movw	r20, r24
 ce6:	4e 5f       	subi	r20, 0xFE	; 254
 ce8:	5f 4f       	sbci	r21, 0xFF	; 255
 cea:	24 17       	cp	r18, r20
 cec:	35 07       	cpc	r19, r21
 cee:	48 f0       	brcs	.+18     	; 0xd02 <malloc+0x132>
 cf0:	4e 0f       	add	r20, r30
 cf2:	5f 1f       	adc	r21, r31
 cf4:	50 93 92 00 	sts	0x0092, r21	; 0x800092 <__brkval+0x1>
 cf8:	40 93 91 00 	sts	0x0091, r20	; 0x800091 <__brkval>
 cfc:	81 93       	st	Z+, r24
 cfe:	91 93       	st	Z+, r25
 d00:	9f cf       	rjmp	.-194    	; 0xc40 <malloc+0x70>
 d02:	f0 e0       	ldi	r31, 0x00	; 0
 d04:	e0 e0       	ldi	r30, 0x00	; 0
 d06:	9c cf       	rjmp	.-200    	; 0xc40 <malloc+0x70>

00000d08 <free>:
free():
 d08:	cf 93       	push	r28
 d0a:	df 93       	push	r29
 d0c:	00 97       	sbiw	r24, 0x00	; 0
 d0e:	e9 f0       	breq	.+58     	; 0xd4a <free+0x42>
 d10:	fc 01       	movw	r30, r24
 d12:	32 97       	sbiw	r30, 0x02	; 2
 d14:	13 82       	std	Z+3, r1	; 0x03
 d16:	12 82       	std	Z+2, r1	; 0x02
 d18:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <__flp>
 d1c:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <__flp+0x1>
 d20:	ed 01       	movw	r28, r26
 d22:	30 e0       	ldi	r19, 0x00	; 0
 d24:	20 e0       	ldi	r18, 0x00	; 0
 d26:	10 97       	sbiw	r26, 0x00	; 0
 d28:	a1 f4       	brne	.+40     	; 0xd52 <free+0x4a>
 d2a:	20 81       	ld	r18, Z
 d2c:	31 81       	ldd	r19, Z+1	; 0x01
 d2e:	82 0f       	add	r24, r18
 d30:	93 1f       	adc	r25, r19
 d32:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <__brkval>
 d36:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <__brkval+0x1>
 d3a:	28 17       	cp	r18, r24
 d3c:	39 07       	cpc	r19, r25
 d3e:	09 f0       	breq	.+2      	; 0xd42 <free+0x3a>
 d40:	61 c0       	rjmp	.+194    	; 0xe04 <free+0xfc>
 d42:	f0 93 92 00 	sts	0x0092, r31	; 0x800092 <__brkval+0x1>
 d46:	e0 93 91 00 	sts	0x0091, r30	; 0x800091 <__brkval>
 d4a:	df 91       	pop	r29
 d4c:	cf 91       	pop	r28
 d4e:	08 95       	ret
 d50:	ea 01       	movw	r28, r20
 d52:	ce 17       	cp	r28, r30
 d54:	df 07       	cpc	r29, r31
 d56:	e8 f5       	brcc	.+122    	; 0xdd2 <free+0xca>
 d58:	4a 81       	ldd	r20, Y+2	; 0x02
 d5a:	5b 81       	ldd	r21, Y+3	; 0x03
 d5c:	9e 01       	movw	r18, r28
 d5e:	41 15       	cp	r20, r1
 d60:	51 05       	cpc	r21, r1
 d62:	b1 f7       	brne	.-20     	; 0xd50 <free+0x48>
 d64:	e9 01       	movw	r28, r18
 d66:	fb 83       	std	Y+3, r31	; 0x03
 d68:	ea 83       	std	Y+2, r30	; 0x02
 d6a:	49 91       	ld	r20, Y+
 d6c:	59 91       	ld	r21, Y+
 d6e:	c4 0f       	add	r28, r20
 d70:	d5 1f       	adc	r29, r21
 d72:	ec 17       	cp	r30, r28
 d74:	fd 07       	cpc	r31, r29
 d76:	61 f4       	brne	.+24     	; 0xd90 <free+0x88>
 d78:	80 81       	ld	r24, Z
 d7a:	91 81       	ldd	r25, Z+1	; 0x01
 d7c:	02 96       	adiw	r24, 0x02	; 2
 d7e:	84 0f       	add	r24, r20
 d80:	95 1f       	adc	r25, r21
 d82:	e9 01       	movw	r28, r18
 d84:	99 83       	std	Y+1, r25	; 0x01
 d86:	88 83       	st	Y, r24
 d88:	82 81       	ldd	r24, Z+2	; 0x02
 d8a:	93 81       	ldd	r25, Z+3	; 0x03
 d8c:	9b 83       	std	Y+3, r25	; 0x03
 d8e:	8a 83       	std	Y+2, r24	; 0x02
 d90:	f0 e0       	ldi	r31, 0x00	; 0
 d92:	e0 e0       	ldi	r30, 0x00	; 0
 d94:	12 96       	adiw	r26, 0x02	; 2
 d96:	8d 91       	ld	r24, X+
 d98:	9c 91       	ld	r25, X
 d9a:	13 97       	sbiw	r26, 0x03	; 3
 d9c:	00 97       	sbiw	r24, 0x00	; 0
 d9e:	b9 f5       	brne	.+110    	; 0xe0e <free+0x106>
 da0:	2d 91       	ld	r18, X+
 da2:	3c 91       	ld	r19, X
 da4:	11 97       	sbiw	r26, 0x01	; 1
 da6:	cd 01       	movw	r24, r26
 da8:	02 96       	adiw	r24, 0x02	; 2
 daa:	82 0f       	add	r24, r18
 dac:	93 1f       	adc	r25, r19
 dae:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <__brkval>
 db2:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <__brkval+0x1>
 db6:	28 17       	cp	r18, r24
 db8:	39 07       	cpc	r19, r25
 dba:	39 f6       	brne	.-114    	; 0xd4a <free+0x42>
 dbc:	30 97       	sbiw	r30, 0x00	; 0
 dbe:	51 f5       	brne	.+84     	; 0xe14 <free+0x10c>
 dc0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__flp+0x1>
 dc4:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__flp>
 dc8:	b0 93 92 00 	sts	0x0092, r27	; 0x800092 <__brkval+0x1>
 dcc:	a0 93 91 00 	sts	0x0091, r26	; 0x800091 <__brkval>
 dd0:	bc cf       	rjmp	.-136    	; 0xd4a <free+0x42>
 dd2:	d3 83       	std	Z+3, r29	; 0x03
 dd4:	c2 83       	std	Z+2, r28	; 0x02
 dd6:	40 81       	ld	r20, Z
 dd8:	51 81       	ldd	r21, Z+1	; 0x01
 dda:	84 0f       	add	r24, r20
 ddc:	95 1f       	adc	r25, r21
 dde:	c8 17       	cp	r28, r24
 de0:	d9 07       	cpc	r29, r25
 de2:	61 f4       	brne	.+24     	; 0xdfc <free+0xf4>
 de4:	4e 5f       	subi	r20, 0xFE	; 254
 de6:	5f 4f       	sbci	r21, 0xFF	; 255
 de8:	88 81       	ld	r24, Y
 dea:	99 81       	ldd	r25, Y+1	; 0x01
 dec:	48 0f       	add	r20, r24
 dee:	59 1f       	adc	r21, r25
 df0:	51 83       	std	Z+1, r21	; 0x01
 df2:	40 83       	st	Z, r20
 df4:	8a 81       	ldd	r24, Y+2	; 0x02
 df6:	9b 81       	ldd	r25, Y+3	; 0x03
 df8:	93 83       	std	Z+3, r25	; 0x03
 dfa:	82 83       	std	Z+2, r24	; 0x02
 dfc:	21 15       	cp	r18, r1
 dfe:	31 05       	cpc	r19, r1
 e00:	09 f0       	breq	.+2      	; 0xe04 <free+0xfc>
 e02:	b0 cf       	rjmp	.-160    	; 0xd64 <free+0x5c>
 e04:	f0 93 94 00 	sts	0x0094, r31	; 0x800094 <__flp+0x1>
 e08:	e0 93 93 00 	sts	0x0093, r30	; 0x800093 <__flp>
 e0c:	9e cf       	rjmp	.-196    	; 0xd4a <free+0x42>
 e0e:	fd 01       	movw	r30, r26
 e10:	dc 01       	movw	r26, r24
 e12:	c0 cf       	rjmp	.-128    	; 0xd94 <free+0x8c>
 e14:	13 82       	std	Z+3, r1	; 0x03
 e16:	12 82       	std	Z+2, r1	; 0x02
 e18:	d7 cf       	rjmp	.-82     	; 0xdc8 <free+0xc0>

00000e1a <realloc>:
realloc():
 e1a:	b0 e0       	ldi	r27, 0x00	; 0
 e1c:	a0 e0       	ldi	r26, 0x00	; 0
 e1e:	e2 e1       	ldi	r30, 0x12	; 18
 e20:	f7 e0       	ldi	r31, 0x07	; 7
 e22:	9b ce       	rjmp	.-714    	; 0xb5a <__prologue_saves__+0x4>
 e24:	8c 01       	movw	r16, r24
 e26:	00 97       	sbiw	r24, 0x00	; 0
 e28:	41 f4       	brne	.+16     	; 0xe3a <realloc+0x20>
 e2a:	cb 01       	movw	r24, r22
 e2c:	d1 de       	rcall	.-606    	; 0xbd0 <malloc>
 e2e:	8c 01       	movw	r16, r24
 e30:	c8 01       	movw	r24, r16
 e32:	cd b7       	in	r28, 0x3d	; 61
 e34:	de b7       	in	r29, 0x3e	; 62
 e36:	e0 e1       	ldi	r30, 0x10	; 16
 e38:	ac ce       	rjmp	.-680    	; 0xb92 <__epilogue_restores__+0x4>
 e3a:	fc 01       	movw	r30, r24
 e3c:	e6 0f       	add	r30, r22
 e3e:	f7 1f       	adc	r31, r23
 e40:	9c 01       	movw	r18, r24
 e42:	22 50       	subi	r18, 0x02	; 2
 e44:	31 09       	sbc	r19, r1
 e46:	e2 17       	cp	r30, r18
 e48:	f3 07       	cpc	r31, r19
 e4a:	08 f4       	brcc	.+2      	; 0xe4e <realloc+0x34>
 e4c:	99 c0       	rjmp	.+306    	; 0xf80 <realloc+0x166>
 e4e:	d9 01       	movw	r26, r18
 e50:	cd 91       	ld	r28, X+
 e52:	dc 91       	ld	r29, X
 e54:	11 97       	sbiw	r26, 0x01	; 1
 e56:	c6 17       	cp	r28, r22
 e58:	d7 07       	cpc	r29, r23
 e5a:	90 f0       	brcs	.+36     	; 0xe80 <realloc+0x66>
 e5c:	c5 30       	cpi	r28, 0x05	; 5
 e5e:	d1 05       	cpc	r29, r1
 e60:	38 f3       	brcs	.-50     	; 0xe30 <realloc+0x16>
 e62:	ce 01       	movw	r24, r28
 e64:	04 97       	sbiw	r24, 0x04	; 4
 e66:	86 17       	cp	r24, r22
 e68:	97 07       	cpc	r25, r23
 e6a:	10 f3       	brcs	.-60     	; 0xe30 <realloc+0x16>
 e6c:	c6 1b       	sub	r28, r22
 e6e:	d7 0b       	sbc	r29, r23
 e70:	22 97       	sbiw	r28, 0x02	; 2
 e72:	c1 93       	st	Z+, r28
 e74:	d1 93       	st	Z+, r29
 e76:	6d 93       	st	X+, r22
 e78:	7c 93       	st	X, r23
 e7a:	cf 01       	movw	r24, r30
 e7c:	45 df       	rcall	.-374    	; 0xd08 <free>
 e7e:	d8 cf       	rjmp	.-80     	; 0xe30 <realloc+0x16>
 e80:	5b 01       	movw	r10, r22
 e82:	ac 1a       	sub	r10, r28
 e84:	bd 0a       	sbc	r11, r29
 e86:	4c 01       	movw	r8, r24
 e88:	8c 0e       	add	r8, r28
 e8a:	9d 1e       	adc	r9, r29
 e8c:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <__flp>
 e90:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <__flp+0x1>
 e94:	51 2c       	mov	r5, r1
 e96:	41 2c       	mov	r4, r1
 e98:	f1 2c       	mov	r15, r1
 e9a:	e1 2c       	mov	r14, r1
 e9c:	10 97       	sbiw	r26, 0x00	; 0
 e9e:	31 f5       	brne	.+76     	; 0xeec <realloc+0xd2>
 ea0:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__brkval>
 ea4:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <__brkval+0x1>
 ea8:	88 15       	cp	r24, r8
 eaa:	99 05       	cpc	r25, r9
 eac:	09 f0       	breq	.+2      	; 0xeb0 <realloc+0x96>
 eae:	5c c0       	rjmp	.+184    	; 0xf68 <realloc+0x14e>
 eb0:	46 16       	cp	r4, r22
 eb2:	57 06       	cpc	r5, r23
 eb4:	08 f0       	brcs	.+2      	; 0xeb8 <realloc+0x9e>
 eb6:	58 c0       	rjmp	.+176    	; 0xf68 <realloc+0x14e>
 eb8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__malloc_heap_end>
 ebc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__malloc_heap_end+0x1>
 ec0:	00 97       	sbiw	r24, 0x00	; 0
 ec2:	41 f4       	brne	.+16     	; 0xed4 <realloc+0xba>
 ec4:	8d b7       	in	r24, 0x3d	; 61
 ec6:	9e b7       	in	r25, 0x3e	; 62
 ec8:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <__malloc_margin>
 ecc:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <__malloc_margin+0x1>
 ed0:	84 1b       	sub	r24, r20
 ed2:	95 0b       	sbc	r25, r21
 ed4:	e8 17       	cp	r30, r24
 ed6:	f9 07       	cpc	r31, r25
 ed8:	08 f0       	brcs	.+2      	; 0xedc <realloc+0xc2>
 eda:	52 c0       	rjmp	.+164    	; 0xf80 <realloc+0x166>
 edc:	f0 93 92 00 	sts	0x0092, r31	; 0x800092 <__brkval+0x1>
 ee0:	e0 93 91 00 	sts	0x0091, r30	; 0x800091 <__brkval>
 ee4:	f9 01       	movw	r30, r18
 ee6:	71 83       	std	Z+1, r23	; 0x01
 ee8:	60 83       	st	Z, r22
 eea:	a2 cf       	rjmp	.-188    	; 0xe30 <realloc+0x16>
 eec:	8d 91       	ld	r24, X+
 eee:	9c 91       	ld	r25, X
 ef0:	11 97       	sbiw	r26, 0x01	; 1
 ef2:	12 96       	adiw	r26, 0x02	; 2
 ef4:	6c 90       	ld	r6, X
 ef6:	12 97       	sbiw	r26, 0x02	; 2
 ef8:	13 96       	adiw	r26, 0x03	; 3
 efa:	7c 90       	ld	r7, X
 efc:	13 97       	sbiw	r26, 0x03	; 3
 efe:	a8 15       	cp	r26, r8
 f00:	b9 05       	cpc	r27, r9
 f02:	59 f5       	brne	.+86     	; 0xf5a <realloc+0x140>
 f04:	6c 01       	movw	r12, r24
 f06:	42 e0       	ldi	r20, 0x02	; 2
 f08:	c4 0e       	add	r12, r20
 f0a:	d1 1c       	adc	r13, r1
 f0c:	ca 14       	cp	r12, r10
 f0e:	db 04       	cpc	r13, r11
 f10:	20 f1       	brcs	.+72     	; 0xf5a <realloc+0x140>
 f12:	ac 01       	movw	r20, r24
 f14:	4a 19       	sub	r20, r10
 f16:	5b 09       	sbc	r21, r11
 f18:	da 01       	movw	r26, r20
 f1a:	12 96       	adiw	r26, 0x02	; 2
 f1c:	15 97       	sbiw	r26, 0x05	; 5
 f1e:	80 f0       	brcs	.+32     	; 0xf40 <realloc+0x126>
 f20:	62 82       	std	Z+2, r6	; 0x02
 f22:	73 82       	std	Z+3, r7	; 0x03
 f24:	51 83       	std	Z+1, r21	; 0x01
 f26:	40 83       	st	Z, r20
 f28:	d9 01       	movw	r26, r18
 f2a:	6d 93       	st	X+, r22
 f2c:	7c 93       	st	X, r23
 f2e:	e1 14       	cp	r14, r1
 f30:	f1 04       	cpc	r15, r1
 f32:	71 f0       	breq	.+28     	; 0xf50 <realloc+0x136>
 f34:	d7 01       	movw	r26, r14
 f36:	13 96       	adiw	r26, 0x03	; 3
 f38:	fc 93       	st	X, r31
 f3a:	ee 93       	st	-X, r30
 f3c:	12 97       	sbiw	r26, 0x02	; 2
 f3e:	78 cf       	rjmp	.-272    	; 0xe30 <realloc+0x16>
 f40:	22 96       	adiw	r28, 0x02	; 2
 f42:	8c 0f       	add	r24, r28
 f44:	9d 1f       	adc	r25, r29
 f46:	f9 01       	movw	r30, r18
 f48:	91 83       	std	Z+1, r25	; 0x01
 f4a:	80 83       	st	Z, r24
 f4c:	f3 01       	movw	r30, r6
 f4e:	ef cf       	rjmp	.-34     	; 0xf2e <realloc+0x114>
 f50:	f0 93 94 00 	sts	0x0094, r31	; 0x800094 <__flp+0x1>
 f54:	e0 93 93 00 	sts	0x0093, r30	; 0x800093 <__flp>
 f58:	6b cf       	rjmp	.-298    	; 0xe30 <realloc+0x16>
 f5a:	48 16       	cp	r4, r24
 f5c:	59 06       	cpc	r5, r25
 f5e:	08 f4       	brcc	.+2      	; 0xf62 <realloc+0x148>
 f60:	2c 01       	movw	r4, r24
 f62:	7d 01       	movw	r14, r26
 f64:	d3 01       	movw	r26, r6
 f66:	9a cf       	rjmp	.-204    	; 0xe9c <realloc+0x82>
 f68:	cb 01       	movw	r24, r22
 f6a:	32 de       	rcall	.-924    	; 0xbd0 <malloc>
 f6c:	7c 01       	movw	r14, r24
 f6e:	00 97       	sbiw	r24, 0x00	; 0
 f70:	39 f0       	breq	.+14     	; 0xf80 <realloc+0x166>
 f72:	ae 01       	movw	r20, r28
 f74:	b8 01       	movw	r22, r16
 f76:	07 d0       	rcall	.+14     	; 0xf86 <memcpy>
 f78:	c8 01       	movw	r24, r16
 f7a:	c6 de       	rcall	.-628    	; 0xd08 <free>
 f7c:	87 01       	movw	r16, r14
 f7e:	58 cf       	rjmp	.-336    	; 0xe30 <realloc+0x16>
 f80:	10 e0       	ldi	r17, 0x00	; 0
 f82:	00 e0       	ldi	r16, 0x00	; 0
 f84:	55 cf       	rjmp	.-342    	; 0xe30 <realloc+0x16>

00000f86 <memcpy>:
memcpy():
 f86:	fb 01       	movw	r30, r22
 f88:	dc 01       	movw	r26, r24
 f8a:	02 c0       	rjmp	.+4      	; 0xf90 <memcpy+0xa>
 f8c:	01 90       	ld	r0, Z+
 f8e:	0d 92       	st	X+, r0
 f90:	41 50       	subi	r20, 0x01	; 1
 f92:	50 40       	sbci	r21, 0x00	; 0
 f94:	d8 f7       	brcc	.-10     	; 0xf8c <memcpy+0x6>
 f96:	08 95       	ret

00000f98 <strcpy>:
strcpy():
 f98:	fb 01       	movw	r30, r22
 f9a:	dc 01       	movw	r26, r24
 f9c:	01 90       	ld	r0, Z+
 f9e:	0d 92       	st	X+, r0
 fa0:	00 20       	and	r0, r0
 fa2:	e1 f7       	brne	.-8      	; 0xf9c <strcpy+0x4>
 fa4:	08 95       	ret

00000fa6 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
 fa6:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
 fa8:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
 faa:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
 fac:	03 c0       	rjmp	.+6      	; 0xfb4 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
 fae:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
 fb0:	09 de       	rcall	.-1006   	; 0xbc4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
 fb2:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
 fb4:	c7 34       	cpi	r28, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
 fb6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
 fb8:	d1 f7       	brne	.-12     	; 0xfae <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 fba:	f8 94       	cli

00000fbc <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
